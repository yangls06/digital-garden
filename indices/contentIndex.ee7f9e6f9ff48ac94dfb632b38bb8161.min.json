{"/":{"title":"🪴 无人之路.","content":"\n\n\n欢迎来到“无人之路”，走进我的数字花园。在这里，我汇集、整理自己在数据系统、自动驾驶、个人管理、人生体悟等方面的涉猎和思考，构建自己的知识系统和精神世界。\n\n\n\n个人的角色是多重的，对应的精神世界应该是丰富的。我有下面的各种身份：\n\n* 长期来看，我是一个数据工程师，致力于构建数据系统，以辅助数据化决策和AI系统。\n* 短期来看，我在自动驾驶行业工作，帮助自动驾驶团队构建从数据采集、数据传输、数据存储、数据挖掘、数据标注到数据消费的data pipeline，以实现数据闭环，助力自动驾驶的研发。\n* 终身来看，我是一个丈夫、父亲和儿子，想要经营一个和谐、进取的家庭；其基石是：我是一个在思想上不断拓展、追求自由的个人。\n\n\n\n无论上面的哪一方面，想要做好，都要付出持续的努力，走上不断积累、不断精进的道路。我期待在这个小小的数字花园里，翻土、播种、浇水、修建、施肥、授粉，打理出属于自己的一片世界。\n\n\n\nMy Digital Garden include: xx\n\n* [Python Programming](notes/python-programming.md)\n\n","lastmodified":"2022-12-02T03:36:15.48926535Z","tags":null},"/notes/hands-on-flask":{"title":"Flask上手","content":"\n# Flask上手\n\n## Reference\n\n[Flask Installation](https://flask.palletsprojects.com/en/2.2.x/installation/)\n\n[Flask Tutorial](https://flask.palletsprojects.com/en/2.2.x/tutorial/)\n\nFollow the tutorial to build a blog web app like:\n\n\n\n![image-20221201145000837](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221201145000837.png)\n\n\n\n## Step by Step\n\n### Step 0.Backgroud\n\nbuild a basic blog application called Flaskr using Flask.\n\n\n\n### Step 1. Project Layout\n\n#### Create a project directory\n\n```shell\nmkdir flask-tutorial\ncd flask-tutorial/\n```\n\n\n\n#### Install Flask\n\n[Flask Installation Doc ](https://flask.palletsprojects.com/en/2.2.x/installation/)\n\nCreate an python environment using [venv](https://docs.python.org/3/library/venv.html#module-venv):\n\n```shell\n$ python3 -m venv venv\n\n$ tree . -L 3\n.\n└── venv\n    ├── bin\n    │   ├── Activate.ps1\n    │   ├── activate\n    │   ├── activate.csh\n    │   ├── activate.fish\n    │   ├── pip\n    │   ├── pip3\n    │   ├── pip3.9\n    │   ├── python -\u003e python3\n    │   ├── python3 -\u003e /Users/yangls06/opt/miniconda3/bin/python3\n    │   └── python3.9 -\u003e python3\n    ├── include\n    ├── lib\n    │   └── python3.9\n    └── pyvenv.cfg\n\n5 directories, 11 files\n\n$ tree venv/lib/python3.9/ -L 3\nvenv/lib/python3.9/\n└── site-packages\n    ├── _distutils_hack\n    │   ├── __init__.py\n    │   ├── __pycache__\n    │   └── override.py\n    ├── distutils-precedence.pth\n    ├── pip\n    │   ├── __init__.py\n    │   ├── __main__.py\n        ...\n    ├── pkg_resources\n    ...\n```\n\n\n\nActivate the environment\n\n```shell\n$ . venv/bin/activate\n```\n\nThen the environment has been changed.\n\n![image-20221201153333547](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221201153333547.png)\n\nInstall Flask\n\nWithin the activated environment, install Flask using `pip`:\n\n```shell\n$ pip install Flask\n\nLooking in indexes: https://pypi.douban.com/simple\nCollecting Flask\n  Downloading https://pypi.doubanio.com/packages/0f/43/15f4f9ab225b0b25352412e8daa3d0e3d135fcf5e127070c74c3632c8b4c/Flask-2.2.2-py3-none-any.whl (101 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 101.5/101.5 KB 1.8 MB/s eta 0:00:00\n...\nCollecting MarkupSafe\u003e=2.0\n  Downloading https://pypi.doubanio.com/packages/06/7f/d5e46d7464360b6ac39c5b0b604770dba937e3d7cab485d2f3298454717b/MarkupSafe-2.1.1-cp39-cp39-macosx_10_9_universal2.whl (17 kB)\nInstalling collected packages: zipp, MarkupSafe, itsdangerous, click, Werkzeug, Jinja2, importlib-metadata, Flask\nSuccessfully installed Flask-2.2.2 Jinja2-3.1.2 MarkupSafe-2.1.1 Werkzeug-2.2.2 click-8.1.3 importlib-metadata-5.1.0 itsdangerous-2.1.2 zipp-3.11.0\n```\n\n\n\nGit init\n\n```shell\n$ git init\n```\n\n\n\nwith `.gitignore`\n\n```\nvenv/\n\n*.pyc\n__pycache__/\n\ninstance/\n\n.pytest_cache/\n.coverage\nhtmlcov/\n\ndist/\nbuild/\n*.egg-info/\n```\n\n\n\nAdd folders\n\n```shell\n$ tree -a -L 1\n.\n├── .git\n├── .gitignore\n├── flaskr\n├── tests\n└── venv\n\n4 directories, 1 file\n```\n\n\n\n### Step 3. Application Setup\n\n#### The Application Factory: \\__init__.py\n\n* create `Flask` instance \n* make `flaskr` directory a package\n\n```python\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n\n\"\"\"\n@Time    :   2022/12/01 15:58:24\n@Author  :   Linsan Yang \n@Desc    :   init flaskr\n\"\"\"\n\nimport os\nfrom flask import Flask\n\ndef create_app(test_config=None):\n    # create and configure the app\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRET_KEY = 'dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not testing\n        app.config.from_pyfile('config.py', silent=True)\n    else:\n        # load the test config if passed in\n        app.config.from_mapping(test_config)\n    \n    # ensure the instance folder exists\n    try:\n        os.makedirs(app.instance_path)\n    except OSError as e:\n        pass\n\n    # a simple page that says hello\n    @app.route('/hello')\n    def hello():\n        return 'Hello, World!'\n\n    return app\n\n```\n\n\n\n**instance folder** \n\nThere will be a `instance/`directory, located outside the `flaskr` package and can hold local data that shouldn’t be committed to version control, such as configuration secrets and the database file.\n\n\n\n**test_config**\n\nUsing test_config for testing.\n\n\n\n**@app.route()**\n\ncreate a simple route of `/hello`\n\n\n\n#### Run The Application\n\nIn the `flask-tutorial` dir not `flaskr` package:\n\n```shell\n$ flask --app flaskr --debug run\n * Serving Flask app 'flaskr'\n * Debug mode: on\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nPress CTRL+C to quit\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 134-914-837\n```\n\nThen open 127.0.0.1:5000/hello in browser, got\n\n![image-20221201162507048](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221201162507048.png)\n\n### Step 4. Define and Access the Database\n\nThe app will use `Sqlite` database to store users and posts. Python has a built-in module `sqlite3` module.\n\n#### Connect to Sqlite\n\nflaskr/db.py\n\n```python\nimport sqlite3\n\nimport click\nfrom flask import current_app, g\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(\n            current_app.config['DATABASE'],\n            detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n    return g.db\n\ndef close_db(e=None):\n    db = g.pop(db, None)\n\n    if db is not None:\n        db.close()\n```\n\n\n\n`g` is a spectial object for each request to share data among different functions. `current_app` is similar.\n\n\n\n#### Create Tables: using sql\n\nDefine `user` and `post` table in `flaskr/schema.sql`:\n\n```sql\nDROP TABLE IF EXISTS user;\nDROP TABLE IF EXISTS post;\n\nCREATE TABLE user (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  username TEXT UNIQUE NOT NULL,\n  password TEXT NOT NULL\n);\n\nCREATE TABLE post (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  author_id INTEGER NOT NULL,\n  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  title TEXT NOT NULL,\n  body TEXT NOT NULL,\n  FOREIGN KEY (author_id) REFERENCES user (id)\n);\n```\n\n\n\nAdd functions to run the SQLs to the `db.py`\n\n```python\ndef init_db():\n    db = get_db()\n    \n    with current_app.open_resource('schema.sql') as f:\n        db.executescript(f.read().decode('utf8'))\n\n@click.command('init-db')\ndef init_db_command():\n    '''Clear the existing data and create new tables.'''\n    init_db()\n    click.echo('Initialized the database.')\n```\n\n\n\n#### Register with the Applicaiton\n\nThe close_db and init_db_command functions need to be registered with the app instance for use.\n\nIn `db.py` add a new `init_app` function:\n\n```python\ndef init_app(app):\n    # tells Flask to call that function when cleaning up after returning the response\n    app.teardown_appcontext(close_db)\n    # adds a new command that can be called with the flask command\n    app.cli.add_command(init_db_command)\n```\n\n\n\nThen import and call this function from the factory in `__init__.py`.\n\n```python\ndef create_app(test_config=None):\n    # create and configure the app\n    app = ...\n    # existing code omitted\n    \n    # add db functions\n    from . import db\n    db.init_app(app)\n\n    return app\n\n```\n\n\n\n#### Initialize the Database\n\nNow use `init-db`command like this:\n\n```shell\n$ flask --app flaskr init-db\nInitialized the database.\n\n$ tree instance/\ninstance/\n└── flaskr.sqlite\n\n0 directories, 1 file\n```\n\n\n\nThe command generates a sqlite db file `flaskr.sqlite` in `instance/` dir. \n\n\n\n### Step 5. Blueprints and Views\n\nReferances:\n\n[Blueprints and Views](https://flask.palletsprojects.com/en/2.2.x/tutorial/views/)\n\n[Use a Flask Blueprint to Architect Your Applications](https://realpython.com/flask-blueprint/#:~:text=Flask%20is%20a%20very%20popular,its%20functionality%20into%20reusable%20components)\n\n\n\nConcept: view\n\nA view is Flask's respond to the outgoing request. Flask uses patterns to match the incoming request URL to the view that should handle it.\n\n\n\nConcept: blueprint\n\nA blueprint is a way to organize a group of related views and other code. Rather than registering views and other code directly with an application, they are registered with a blueprint. Then the blueprint is registered with the application when it is available in the factory function.\n\n\n\n#### Create a Blueprint\n\nFlaskr will have two blueprints:\n\n* auth functions\n* blog posts functions\n\n\n\n`Flaskr/auth.py`\n\n```python\nimport functools\n\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, session, url_for\n)\nfrom werkzeug.security import check_password_hash, generate_password_hash\nfrom flaskr.db import get_db\n\nbp = Blueprint('auth', __name__, url_prefix='/auth')\n\n```\n\nA new `Blueprint` is created:\n\n* with `name`: 'auth'\n* with `import_name`: '\\__name__', helping the blueprint to know where it’s defined\n* with `url_prefix`: will be prepended (added at head)to all the URLs associated with this blueprint.\n\nThen register the blueprint to the app from the factory in the `__init__.py`\n\n```python\ndef create_app(test_config=None):\n    # create and configure the app\n    app = ...\n    # existing code omitted\n    \n\n    # add auth blueprint\n    from . import auth\n    app.register_blueprint(auth.bp)\n\n    return app\n```\n\n\n\n\u003e Referances:\n\u003e\n\u003e [Python functools](https://docs.python.org/3/library/functools.html)\n\n\n\n#### Register view\n\nWhen the user visits the `/auth/register` URL, the `register` view will return [HTML](https://developer.mozilla.org/docs/Web/HTML) with a form for them to fill out. When they submit the form, it will validate their input and either show the form again with an error message or create the new user and go to the login page.\n\n\n\nThe view code is as following in `flaskr/auth.py`\n\n```python\n@bp.route('/register', methods=('GET', 'POST'))\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n\n        if not username:\n            error = 'Username is required.'\n        elif not password:\n            error = 'Password is required.'\n\n        if error is None:\n            try:\n                db.execute(\n                    'INSERT INTO user (username, password) VALUES (?, ?)',\n                    (username, generate_password_hash(password))\n                )\n                db.commit()\n            except db.IntegrityError:\n                error = f\"User {username} is already registered.\"\n            else:\n                return redirect(url_for('auth.login'))\n        \n        flash(error)\n    \n    return render_template('auth/register.html')\n```\n\n\n\nThe `register` view works as following:\n\n* @bp.route associates the URL `/register` with the `register` view.\n* If the user submited the register form, `request.method == 'POST'`, then validate the input `username` and `password` and store them into the database.\n* If storing the user info succeeds, then redirect to the `auth.login` page.\n* If the user is initially landing on the `register` page, or there was a validation error, the `register.html` will be shown.\n\n\n\n#### Login view\n\nThis view follows the same pattern as `register` view.\n\n```python\n @bp.route('/login', methods=('GET', 'POST'))\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n\n        user = db.execute(\n            'SELECT * FROM user WHERE username = ?', (username,)\n        ).fetchone()\n\n        if user is None:\n            error = 'Incorrect username.'\n        elif not check_password_hash(user['password'], password):\n            error = 'Incorrect password.'\n        \n        if error is None:\n            session.clear()\n            session['user_id'] = user['id']\n            return redirect(url_for('index'))\n        \n        flash(error)\n    \n    return render_template('auth/login.html')\n\n```\n\nTips:\n\n* The user info is queried and stored in `user` variable using `fetch_one` function.\n* Validate the `username` and `password` (by `check_password_hash`) inputs.\n* The `session` (a dict storing data across requests) refreshes if login succeeds. (The data is stored in a *cookie* that is sent to the browser, and the browser then sends it back with subsequent requests.)\n\n\n\nWe can get user info at the beginning of each request via `session`:\n\n```python\n@bp.before_app_request\ndef load_logged_in_user():\n    user_id = session.get('user_id')\n\n    if user_id is None:\n        g.user = None\n    else:\n        g.user = get_db().execute(\n            'SELECT * FROM user WHERE id = ?', (user_id,)\n        ).fetchone()\n```\n\nTips:\n\n* [`bp.before_app_request()`](https://flask.palletsprojects.com/en/2.2.x/api/#flask.Blueprint.before_app_request) registers a function that runs before the view function, no matter what URL is requested. \n* `load_logged_in_user`  gets that user info from the database via `session` and stores it on [`g.user`](https://flask.palletsprojects.com/en/2.2.x/api/#flask.g), which lasts for the length of the request. \n\n\n\n#### Logout view\n\nThe Logout view removes the user id from the [`session`](https://flask.palletsprojects.com/en/2.2.x/api/#flask.session). \n\n```python\n@bp.route('/logout')\ndef logout():\n    session.clear()\n    return redirect(url_for('index'))\n```\n\n\n\n#### Require Auth in Other views\n\nCreating, editing and deleting blog posts requires the user to be logged in. Use a **decorator** to achieve this.\n\n```python\ndef login_required(view):\n    @functools.wraps(view)\n    def wrapped_view(**kwargs):\n        if g.user is None:\n            return redirect(url_for('auth.login'))\n        \n        return view(**kwargs)\n    \n    return wrapped_view \n```\n\nThis decorator wraps the view in this way: if a user is not logged in, then redirect to login page; if logged in, return the orginal view.\n\n\n\n### Step 6. Templates\n\n","lastmodified":"2022-12-02T03:36:15.48926535Z","tags":null},"/notes/python-programming":{"title":"Python Programming","content":"\n# Python Programming\n\n## Flask\n\n* [Hands on Flask](notes/hands-on-flask.md)\n","lastmodified":"2022-12-02T03:36:15.48926535Z","tags":null}}