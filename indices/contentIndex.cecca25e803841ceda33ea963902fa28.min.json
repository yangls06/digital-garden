{"/":{"title":"🪴 无人之路.","content":"\n\n\n欢迎来到“无人之路”，走进我的数字花园。在这里，我汇集、整理自己在数据系统、自动驾驶、个人管理、人生体悟等方面的涉猎和思考，构建自己的知识系统和精神世界。\n\n\n\n个人的角色是多重的，对应的精神世界应该是丰富的。我有下面的各种身份：\n\n* 长期来看，我是一个数据工程师，致力于构建数据系统，以辅助数据化决策和AI系统。\n* 短期来看，我在自动驾驶行业工作，帮助自动驾驶团队构建从数据采集、数据传输、数据存储、数据挖掘、数据标注到数据消费的data pipeline，以实现数据闭环，助力自动驾驶的研发。\n* 终身来看，我是一个丈夫、父亲和儿子，想要经营一个和谐、进取的家庭；其基石是：我是一个在思想上不断拓展、追求自由的个人。\n\n\n\n无论上面的哪一方面，想要做好，都要付出持续的努力，走上不断积累、不断精进的道路。我期待在这个小小的数字花园里，翻土、播种、浇水、修建、施肥、授粉，打理出属于自己的一片世界。\n\n\n\nMy Digital Garden include: xx\n\n* [Python Programming](notes/python-programming.md)\n\n","lastmodified":"2022-12-03T15:09:30.684222931Z","tags":null},"/notes/hands-on-flask":{"title":"Flask上手","content":"\n# Flask上手\n\n## Reference\n\n[Flask Installation](https://flask.palletsprojects.com/en/2.2.x/installation/)\n\n[Flask Tutorial](https://flask.palletsprojects.com/en/2.2.x/tutorial/)\n\nFollow the tutorial to build a blog web app like:\n\n\n\n![image-20221201145000837](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221201145000837.png)\n\n\n\n## Step by Step\n\n### Step 0.Backgroud\n\nbuild a basic blog application called Flaskr using Flask.\n\n\n\n### Step 1. Project Layout\n\n#### Create a project directory\n\n```shell\nmkdir flask-tutorial\ncd flask-tutorial/\n```\n\n\n\n#### Install Flask\n\n[Flask Installation Doc ](https://flask.palletsprojects.com/en/2.2.x/installation/)\n\nCreate an python environment using [venv](https://docs.python.org/3/library/venv.html#module-venv):\n\n```shell\n$ python3 -m venv venv\n\n$ tree . -L 3\n.\n└── venv\n    ├── bin\n    │   ├── Activate.ps1\n    │   ├── activate\n    │   ├── activate.csh\n    │   ├── activate.fish\n    │   ├── pip\n    │   ├── pip3\n    │   ├── pip3.9\n    │   ├── python -\u003e python3\n    │   ├── python3 -\u003e /Users/yangls06/opt/miniconda3/bin/python3\n    │   └── python3.9 -\u003e python3\n    ├── include\n    ├── lib\n    │   └── python3.9\n    └── pyvenv.cfg\n\n5 directories, 11 files\n\n$ tree venv/lib/python3.9/ -L 3\nvenv/lib/python3.9/\n└── site-packages\n    ├── _distutils_hack\n    │   ├── __init__.py\n    │   ├── __pycache__\n    │   └── override.py\n    ├── distutils-precedence.pth\n    ├── pip\n    │   ├── __init__.py\n    │   ├── __main__.py\n        ...\n    ├── pkg_resources\n    ...\n```\n\n\n\nActivate the environment\n\n```shell\n$ . venv/bin/activate\n```\n\nThen the environment has been changed.\n\n![image-20221201153333547](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221201153333547.png)\n\nInstall Flask\n\nWithin the activated environment, install Flask using `pip`:\n\n```shell\n$ pip install Flask\n\nLooking in indexes: https://pypi.douban.com/simple\nCollecting Flask\n  Downloading https://pypi.doubanio.com/packages/0f/43/15f4f9ab225b0b25352412e8daa3d0e3d135fcf5e127070c74c3632c8b4c/Flask-2.2.2-py3-none-any.whl (101 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 101.5/101.5 KB 1.8 MB/s eta 0:00:00\n...\nCollecting MarkupSafe\u003e=2.0\n  Downloading https://pypi.doubanio.com/packages/06/7f/d5e46d7464360b6ac39c5b0b604770dba937e3d7cab485d2f3298454717b/MarkupSafe-2.1.1-cp39-cp39-macosx_10_9_universal2.whl (17 kB)\nInstalling collected packages: zipp, MarkupSafe, itsdangerous, click, Werkzeug, Jinja2, importlib-metadata, Flask\nSuccessfully installed Flask-2.2.2 Jinja2-3.1.2 MarkupSafe-2.1.1 Werkzeug-2.2.2 click-8.1.3 importlib-metadata-5.1.0 itsdangerous-2.1.2 zipp-3.11.0\n```\n\n\n\nGit init\n\n```shell\n$ git init\n```\n\n\n\nwith `.gitignore`\n\n```\nvenv/\n\n*.pyc\n__pycache__/\n\ninstance/\n\n.pytest_cache/\n.coverage\nhtmlcov/\n\ndist/\nbuild/\n*.egg-info/\n```\n\n\n\nAdd folders\n\n```shell\n$ tree -a -L 1\n.\n├── .git\n├── .gitignore\n├── flaskr\n├── tests\n└── venv\n\n4 directories, 1 file\n```\n\n\n\n### Step 3. Application Setup\n\n#### The Application Factory: \\__init__.py\n\n* create `Flask` instance \n* make `flaskr` directory a package\n\n```python\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n\n\"\"\"\n@Time    :   2022/12/01 15:58:24\n@Author  :   Linsan Yang \n@Desc    :   init flaskr\n\"\"\"\n\nimport os\nfrom flask import Flask\n\ndef create_app(test_config=None):\n    # create and configure the app\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRET_KEY = 'dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not testing\n        app.config.from_pyfile('config.py', silent=True)\n    else:\n        # load the test config if passed in\n        app.config.from_mapping(test_config)\n    \n    # ensure the instance folder exists\n    try:\n        os.makedirs(app.instance_path)\n    except OSError as e:\n        pass\n\n    # a simple page that says hello\n    @app.route('/hello')\n    def hello():\n        return 'Hello, World!'\n\n    return app\n\n```\n\n\n\n**instance folder** \n\nThere will be a `instance/`directory, located outside the `flaskr` package and can hold local data that shouldn’t be committed to version control, such as configuration secrets and the database file.\n\n\n\n**test_config**\n\nUsing test_config for testing.\n\n\n\n**@app.route()**\n\ncreate a simple route of `/hello`\n\n\n\n#### Run The Application\n\nIn the `flask-tutorial` dir not `flaskr` package:\n\n```shell\n$ flask --app flaskr --debug run\n * Serving Flask app 'flaskr'\n * Debug mode: on\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nPress CTRL+C to quit\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 134-914-837\n```\n\nThen open 127.0.0.1:5000/hello in browser, got\n\n![image-20221201162507048](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221201162507048.png)\n\n### Step 4. Define and Access the Database\n\nThe app will use `Sqlite` database to store users and posts. Python has a built-in module `sqlite3` module.\n\n#### Connect to Sqlite\n\nflaskr/db.py\n\n```python\nimport sqlite3\n\nimport click\nfrom flask import current_app, g\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(\n            current_app.config['DATABASE'],\n            detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n    return g.db\n\ndef close_db(e=None):\n    db = g.pop(db, None)\n\n    if db is not None:\n        db.close()\n```\n\n\n\n`g` is a spectial object for each request to share data among different functions. `current_app` is similar.\n\n\n\n#### Create Tables: using sql\n\nDefine `user` and `post` table in `flaskr/schema.sql`:\n\n```sql\nDROP TABLE IF EXISTS user;\nDROP TABLE IF EXISTS post;\n\nCREATE TABLE user (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  username TEXT UNIQUE NOT NULL,\n  password TEXT NOT NULL\n);\n\nCREATE TABLE post (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  author_id INTEGER NOT NULL,\n  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  title TEXT NOT NULL,\n  body TEXT NOT NULL,\n  FOREIGN KEY (author_id) REFERENCES user (id)\n);\n```\n\n\n\nAdd functions to run the SQLs to the `db.py`\n\n```python\ndef init_db():\n    db = get_db()\n    \n    with current_app.open_resource('schema.sql') as f:\n        db.executescript(f.read().decode('utf8'))\n\n@click.command('init-db')\ndef init_db_command():\n    '''Clear the existing data and create new tables.'''\n    init_db()\n    click.echo('Initialized the database.')\n```\n\n\n\n#### Register with the Applicaiton\n\nThe close_db and init_db_command functions need to be registered with the app instance for use.\n\nIn `db.py` add a new `init_app` function:\n\n```python\ndef init_app(app):\n    # tells Flask to call that function when cleaning up after returning the response\n    app.teardown_appcontext(close_db)\n    # adds a new command that can be called with the flask command\n    app.cli.add_command(init_db_command)\n```\n\n\n\nThen import and call this function from the factory in `__init__.py`.\n\n```python\ndef create_app(test_config=None):\n    # create and configure the app\n    app = ...\n    # existing code omitted\n    \n    # add db functions\n    from . import db\n    db.init_app(app)\n\n    return app\n\n```\n\n\n\n#### Initialize the Database\n\nNow use `init-db`command like this:\n\n```shell\n$ flask --app flaskr init-db\nInitialized the database.\n\n$ tree instance/\ninstance/\n└── flaskr.sqlite\n\n0 directories, 1 file\n```\n\n\n\nThe command generates a sqlite db file `flaskr.sqlite` in `instance/` dir. \n\n\n\n### Step 5. Blueprints and Views\n\nReferances:\n\n[Blueprints and Views](https://flask.palletsprojects.com/en/2.2.x/tutorial/views/)\n\n[Use a Flask Blueprint to Architect Your Applications](https://realpython.com/flask-blueprint/#:~:text=Flask%20is%20a%20very%20popular,its%20functionality%20into%20reusable%20components)\n\n\n\nConcept: view\n\nA view is Flask's respond to the outgoing request. Flask uses patterns to match the incoming request URL to the view that should handle it.\n\n\n\nConcept: blueprint\n\nA blueprint is a way to organize a group of related views and other code. Rather than registering views and other code directly with an application, they are registered with a blueprint. Then the blueprint is registered with the application when it is available in the factory function.\n\n\n\n#### Create a Blueprint\n\nFlaskr will have two blueprints:\n\n* auth functions\n* blog posts functions\n\n\n\n`Flaskr/auth.py`\n\n```python\nimport functools\n\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, session, url_for\n)\nfrom werkzeug.security import check_password_hash, generate_password_hash\nfrom flaskr.db import get_db\n\nbp = Blueprint('auth', __name__, url_prefix='/auth')\n\n```\n\nA new `Blueprint` is created:\n\n* with `name`: 'auth'\n* with `import_name`: '\\__name__', helping the blueprint to know where it’s defined\n* with `url_prefix`: will be prepended (added at head)to all the URLs associated with this blueprint.\n\nThen register the blueprint to the app from the factory in the `__init__.py`\n\n```python\ndef create_app(test_config=None):\n    # create and configure the app\n    app = ...\n    # existing code omitted\n    \n\n    # add auth blueprint\n    from . import auth\n    app.register_blueprint(auth.bp)\n\n    return app\n```\n\n\n\n\u003e Referances:\n\u003e\n\u003e [Python functools](https://docs.python.org/3/library/functools.html)\n\n\n\n#### Register view\n\nWhen the user visits the `/auth/register` URL, the `register` view will return [HTML](https://developer.mozilla.org/docs/Web/HTML) with a form for them to fill out. When they submit the form, it will validate their input and either show the form again with an error message or create the new user and go to the login page.\n\n\n\nThe view code is as following in `flaskr/auth.py`\n\n```python\n@bp.route('/register', methods=('GET', 'POST'))\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n\n        if not username:\n            error = 'Username is required.'\n        elif not password:\n            error = 'Password is required.'\n\n        if error is None:\n            try:\n                db.execute(\n                    'INSERT INTO user (username, password) VALUES (?, ?)',\n                    (username, generate_password_hash(password))\n                )\n                db.commit()\n            except db.IntegrityError:\n                error = f\"User {username} is already registered.\"\n            else:\n                return redirect(url_for('auth.login'))\n        \n        flash(error)\n    \n    return render_template('auth/register.html')\n```\n\n\n\nThe `register` view works as following:\n\n* @bp.route associates the URL `/register` with the `register` view.\n* If the user submited the register form, `request.method == 'POST'`, then validate the input `username` and `password` and store them into the database.\n* If storing the user info succeeds, then redirect to the `auth.login` page.\n* If the user is initially landing on the `register` page, or there was a validation error, the `register.html` will be shown.\n\n\n\n#### Login view\n\nThis view follows the same pattern as `register` view.\n\n```python\n @bp.route('/login', methods=('GET', 'POST'))\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n\n        user = db.execute(\n            'SELECT * FROM user WHERE username = ?', (username,)\n        ).fetchone()\n\n        if user is None:\n            error = 'Incorrect username.'\n        elif not check_password_hash(user['password'], password):\n            error = 'Incorrect password.'\n        \n        if error is None:\n            session.clear()\n            session['user_id'] = user['id']\n            return redirect(url_for('index'))\n        \n        flash(error)\n    \n    return render_template('auth/login.html')\n\n```\n\nTips:\n\n* The user info is queried and stored in `user` variable using `fetch_one` function.\n* Validate the `username` and `password` (by `check_password_hash`) inputs.\n* The `session` (a dict storing data across requests) refreshes if login succeeds. (The data is stored in a *cookie* that is sent to the browser, and the browser then sends it back with subsequent requests.)\n\n\n\nWe can get user info at the beginning of each request via `session`:\n\n```python\n@bp.before_app_request\ndef load_logged_in_user():\n    user_id = session.get('user_id')\n\n    if user_id is None:\n        g.user = None\n    else:\n        g.user = get_db().execute(\n            'SELECT * FROM user WHERE id = ?', (user_id,)\n        ).fetchone()\n```\n\nTips:\n\n* [`bp.before_app_request()`](https://flask.palletsprojects.com/en/2.2.x/api/#flask.Blueprint.before_app_request) registers a function that runs before the view function, no matter what URL is requested. \n* `load_logged_in_user`  gets that user info from the database via `session` and stores it on [`g.user`](https://flask.palletsprojects.com/en/2.2.x/api/#flask.g), which lasts for the length of the request. \n\n\n\n#### Logout view\n\nThe Logout view removes the user id from the [`session`](https://flask.palletsprojects.com/en/2.2.x/api/#flask.session). \n\n```python\n@bp.route('/logout')\ndef logout():\n    session.clear()\n    return redirect(url_for('index'))\n```\n\n\n\n#### Require Auth in Other views\n\nCreating, editing and deleting blog posts requires the user to be logged in. Use a **decorator** to achieve this.\n\n```python\ndef login_required(view):\n    @functools.wraps(view)\n    def wrapped_view(**kwargs):\n        if g.user is None:\n            return redirect(url_for('auth.login'))\n        \n        return view(**kwargs)\n    \n    return wrapped_view \n```\n\nThis decorator wraps the view in this way: if a user is not logged in, then redirect to login page; if logged in, return the orginal view.\n\n\n\n### Step 6. Templates\n\nThough `auth.login` view has been created, a `TemplateNotFound` error will be raised when you visit http://127.0.0.1:5000/auth/login.\n\n\n\n![image-20221202154357379](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221202154357379.png)\n\nThis is because the view calls `render_template()`, but no templates are created. \n\n\n\nTips:\n\n* The template files will be stored in the `templates` directory inside the `flaskr` package.\n* Templates are files that contain static data as well as placeholders for dynamic data. \n* A template is rendered with specific data to produce a final document. Flask uses the [Jinja](https://jinja.palletsprojects.com/templates/) template library to render templates.\n* Special delimiters are used to distinguish Jinja syntax from the static data in the template. \n  * Anything between `{{` and `}}` is an expression that will be output to the final document. \n  * `{%` and `%}` denotes a control flow statement like `if` and `for`\n\n\n\n#### The Base Layout\n\nEach page in the app has the same basic layout around a different body.Instead of writing the entire HTML structure in each template, each template will extend a base template and override specific sections.\n\n\n\nFile: `flaskr/templates/base.html`\n\n```html\n\u003c!DOCTYPE html\u003e\n\u003ctitle\u003e{% block title %}{% endblock %} - Flaskr\u003c/title\u003e\n\u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\"\u003e\n\u003cnav\u003e\n   \u003ch1\u003eFlaskr\u003c/h1\u003e\n   \u003cul\u003e\n    {% if g.user %}\n        \u003cli\u003e\u003cspan\u003e{{ g.user['username'] }}\u003c/span\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"{{ url_for('auth.logout') }}\"\u003eLog Out\u003c/a\u003e\u003c/li\u003e\n    {% else %}\n        \u003cli\u003e\u003ca href=\"{{ url_for('auth.register') }}\"\u003eRegister\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"{{ url_for('auth.login') }}\"\u003eLog \u003cInput:c\u003e\u003c/Input:c\u003e\u003c/a\u003e\u003c/li\u003e\n    {% endif %}\n   \u003c/ul\u003e \n\u003c/nav\u003e\n\n\u003csection class=\"content\"\u003e\n    \u003cheader\u003e\n        {% block header %}\n        {% endblock %}\n    \u003c/header\u003e\n    {% for message in get_flashed_messages() %}\n        \u003cdiv class=\"flash\"\u003e{{ message }}\u003c/div\u003e\n    {% endfor %}\n    \n    {% block content %}\n    {% endblock %}\n\u003c/section\u003e\n\n```\n\n\n\n\u003eNotes: Using `Jinja Snippets` and `HTML CSS Support` extensions in vscode is helpful to write html code of Jinja templates.\n\n\n\nThere are three blocks defined here that will be overridden in the other templates:\n\n* `{% block title %}` will change the title displayed in the browser’s tab and window title.\n* `{% block header %}` is similar to `title` but will change the title displayed on the page.\n* `{% block content %}` is where the content of each page goes, such as the login form or a blog post.\n\n\n\nThe base template is directly in the `templates` directory. To keep the others organized, the templates for a blueprint will be placed in a directory with the same name as the blueprint.\n\n#### Register template\n\nFile: `flaskr/templates/register.html`\n\n```html\n{% extends 'base.html' %}\n\n{% block header %}\n    \u003ch1\u003e{% block title %}Register{% endblock %}\u003c/h1\u003e\n{% endblock %}\n\n{% block content %}\n    \u003cform method=\"post\"\u003e\n        \u003clabel for=\"username\"\u003eUsername\u003c/label\u003e\n        \u003cinput name=\"username\" id=\"username\" required\u003e        \n        \u003clabel for=\"password\"\u003ePassword\u003c/label\u003e\n        \u003cinput type=\"password\" name=\"password\" id=\"password\" required\u003e\n        \u003cinput type=\"submit\" value=\"Register\"\u003e\n    \u003c/form\u003e\n{% endblock %}\n```\n\n\n#### Log In template\n\nThis is identical to the register template except for the title and submit button.\n\n```html\n{% extends 'base.html' %}\n\n{% block header %}\n    \u003ch1\u003e{% block title %}Log In{% endblock %}\u003c/h1\u003e\n{% endblock %}\n\n{% block content %}\n    \u003cform method=\"post\"\u003e\n        \u003clabel for=\"username\"\u003eUsername\u003c/label\u003e\n        \u003cinput name=\"username\" id=\"username\" required\u003e        \n        \u003clabel for=\"password\"\u003ePassword\u003c/label\u003e\n        \u003cinput type=\"password\" name=\"password\" id=\"password\" required\u003e\n        \u003cinput type=\"submit\" value=\"Log In\"\u003e\n    \u003c/form\u003e\n{% endblock %}\n```\n\n\n\n#### Register a user\n\nVisit http://127.0.0.1:5000/auth/register\n\n![image-20221202174125671](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221202174125671.png)\n\nIf no password inputed, you will see:\n\n![image-20221202174349791](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221202174349791.png)\n\nIf register succeeds, it will redirect to login page:\n\n![image-20221202174548748](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221202174548748.png)\n\nIf incorrect password is inputed, you will get `Incorrect password` warning:\n\n![image-20221202174721957](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221202174721957.png)\n\n\n\n### Step 7. Static Files\n\nUse css file in the `flask/static` directory to give the webpages some style. In the `base.html` template there is already a link to `style.css` file.\n\n```html\n{{ url_for('static', filename='style.css') }}\n```\n\n\n\nFile: flask/static/style.css\n\n```css\nhtml { font-family: sans-serif; background: #eee; padding: 1rem; }\nbody { max-width: 960px; margin: 0 auto; background: white; }\nh1 { font-family: serif; color: #377ba8; margin: 1rem 0; }\na { color: #377ba8; }\nhr { border: none; border-top: 1px solid lightgray; }\nnav { background: lightgray; display: flex; align-items: center; padding: 0 0.5rem; }\nnav h1 { flex: auto; margin: 0; }\nnav h1 a { text-decoration: none; padding: 0.25rem 0.5rem; }\nnav ul  { display: flex; list-style: none; margin: 0; padding: 0; }\nnav ul li a, nav ul li span, header .action { display: block; padding: 0.5rem; }\n.content { padding: 0 1rem 1rem; }\n.content \u003e header { border-bottom: 1px solid lightgray; display: flex; align-items: flex-end; }\n.content \u003e header h1 { flex: auto; margin: 1rem 0 0.25rem 0; }\n.flash { margin: 1em 0; padding: 1em; background: #cae6f6; border: 1px solid #377ba8; }\n.post \u003e header { display: flex; align-items: flex-end; font-size: 0.85em; }\n.post \u003e header \u003e div:first-of-type { flex: auto; }\n.post \u003e header h1 { font-size: 1.5em; margin-bottom: 0; }\n.post .about { color: slategray; font-style: italic; }\n.post .body { white-space: pre-line; }\n.content:last-child { margin-bottom: 0; }\n.content form { margin: 1em 0; display: flex; flex-direction: column; }\n.content label { font-weight: bold; margin-bottom: 0.5em; }\n.content input, .content textarea { margin-bottom: 1em; }\n.content textarea { min-height: 12em; resize: vertical; }\ninput.danger { color: #cc2f2e; }\ninput[type=submit] { align-self: start; min-width: 10em; }\n```\n\n\n\nAfter that, reload the login page, and you can see:\n\n![image-20221202175806462](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221202175806462.png)\n\n\n\n### Step 8. Blog Blueprint\n\nImplement the blog blueprint to allow a logged-in user to create posts and edit/delete the posts of his/her own.\n\n\u003e Note: As you implement each view, keep the development server running. As you save your changes, try going to the URL in your browser and testing them out.\n\n\n\n#### The Blog Blueprint\n\n\n\nDefine blog blueprint in file: `flask/blog.py`\n\n``` \nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, session, url_for\n)\nfrom werkzeug.exceptions import abort\n\nfrom flaskr.db import get_db\nfrom flaskr.auth import login_required\n\nbp = Blueprint('auth', __name__)\n```\n\n\n\nRegister this blueprint in the app factory in file : `flask/__init__.py`\n\n```python\ndef create_app(test_config=None):\n    # create and configure the app\n    app = ...\n    # existing code omitted\n\n    # add blog blueprint\n    from . import blog\n    app.register_blueprint(blog.bp)\n    app.add_url_rule('/', endpoint='index')\n\n    return app\n```\n\n\n\nUnlike the auth blueprint, the blog blueprint does not have a `url_prefix`. So the index view will be at `/`, the create view at `/create`. The blog is the main feature of Flaskr app, so it makes sense that the blog index will be the main index.\n\n\n\nThe endpoint for index view in blog blueprint will be `blog.index`. The `app.add_url_rule('/', endpoint='index')` code associates the endpoint name 'index' with the `/` url so that `url_for('index')` or `url_for('blog.index')` will both work, generating the same `/` URL either way. \n\n\n\n#### Index: view and template\n\nThe index view shows all the posts of the logged-in user, order by created time desc. Use SQL's JOIN clause.\n\n\n\nDefine index view in file: `flaskr/blog.py`:\n\n```python\n@bp.route('/')\ndef index():\n    db = get_db()\n    posts = db.execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' ORDER BY created DESC'\n    ).fetchall()\n    return render_template('blog/index.html', posts=posts)\n```\n\n\n\nDefine index template in file: `flaskr/templates/index.html`:\n\n```html\n{% extends 'base.html' %}\n\n{% block header %}\n    \u003ch1\u003e{% block title %}Posts{% endblock %}\u003c/h1\u003e\n    {% if g.user %}\n        \u003ca class=\"action\" href=\"{{ url_for('blog.create') }}\" \u003eNew\u003c/a\u003e\n    {% endif %}\n{% endblock %}\n\n{% block content %}\n    {% for post in posts %}\n        \u003carticle class=\"post\"\u003e\n            \u003cheader\u003e\n                \u003cdiv\u003e\n                    \u003ch1\u003e{{ post['title'] }}\u003c/h1\u003e\n                    \u003cdiv class=\"about\"\u003eby {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }}\u003c/div\u003e\n                \u003c/div\u003e\n                {% if g.user['id'] == post['author_id'] %}\n                    \u003ca class=\"action\" href=\"{{ url_for('blog.update', id=post['id']) }}\"\u003eEdit\u003c/a\u003e\n                {% endif %}\n            \u003c/header\u003e\n        \u003c/article\u003e\n        {% if not loop.last %}\n            \u003chr\u003e\n        {% endif %}\n    {% endfor %}\n{% endblock %}\n```\n\nTips:\n\n* when a user is logged in, the `header` block adds a link to the `create` view.\n* when the user is the author of a post, an `Edit` link to the `update` view will be seen.\n* `loop.last` is a special variable of Jinja's loop.\n\n\n\n#### Create: view and template\n\nThe `blog.create` view acts the similar way as `auth.register` view.\n\nDefine `blog.create` view in file: `flaskr/blog.py`:\n\n```python\n@bp.route('/create', methods=('GET', 'POST'))\n@login_required\ndef create():\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is requested.'\n        \n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'INSERT INTO post (title, body, author_id)'\n                ' VALUES (?, ?, ?)',\n                (title, body, g.user['id'])\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n            \n    return render_template('blog/create.html')\n```\n\n\n\nTips:\n\n* if a new post is POSTed, add it into the database.\n* Or display the form of creating post in the `create` template.\n* Login_required decorator is used here to insure the user is logged-in before a new post is created.\n\n\n\nDefine the `create` template in file: `flaskr/templates/blog/create.html`\n\n```html\n{% extends 'base.html' %}\n\n{% block header %}\n    \u003ch1\u003e{% block title %}New Post{% endblock %}\u003c/h1\u003e\n{% endblock %}\n\n{% block content %}\n    \u003cform method=\"POST\"\u003e\n        \u003clabel for=\"title\"\u003eTitle\u003c/label\u003e\n        \u003cinput name=\"title\" id=\"title\" value=\"{{ request.form['title'] }}\" required\u003e\n        \u003clabel for=\"body\"\u003eBody\u003c/label\u003e\n        \u003ctextarea name=\"body\" id=\"body\"\u003e{{ request.form['body'] }}\u003c/textarea\u003e\n        \u003cinput type=\"submit\" value=\"Save\"\u003e\n    \u003c/form\u003e\n{% endblock %}\n```\n\n\n\n#### Update: view and template\n\nWrite a `get_post()` function to fetch a post by id and check if the author equals the logged in user. This function will be used in `update` and `delete` view.\n\n\n\nDefine get_post() function in file: `flaskr/blog.py`:\n\n```python\ndef get_post(id, check_author=True):\n    post = get_db().execute(\n        'SELECT p.id, title, body, created, author_id, user_name'\n        ' FROM post p JOIN user u ON p.author_id=u.id'\n        ' WHERE p.id = ?',\n        (id,)\n    ).fetchone()\n\n    if post is None:\n        abort(404, f'Post id {id} does not exist.')\n\n    if check_author and post['author_id'] != g.user['id']:\n        abort(403)\n    \n    return post\n```\n\nTips:\n\n* `abort()` will raise a exception that returns an HTTP status code like 404 (Not Found) or 403 (Forbidden).\n\n\n\nDefine `update` view in file: `flaskr/blog.py`:\n\n```python\n\n@bp.route('/\u003cint:id\u003e/update', methods=('GET', 'POST'))\n@login_required\ndef update(id):\n    post = get_post(id)\n\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n        \n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'UPDATE post SET title = ?, body = ?'\n                ' WHERE id = ?',\n                (title, body, id)\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n        \n    return render_template('blog/update.html', post=post)\n```\n\nTips:\n\n* `update` view takes an argument `id` , which corresponds to the `\u003cint:id\u003e` in the route. A real URL will look like `/1/update`. And the url_for() function also needs to be passed the `id` argument in the way of `url_for('blog.update', id=post['id'])`.\n\n\n\nDefine the update template in file: `flaskr/templates/blog/update.html`\n\n```html\n{% extends 'base.html' %}\n\n{% block header %}\n    \u003ch1\u003e{% block title %}Edit \"{{ post['title'] }}\"{% endblock %}\u003c/h1\u003e\n{% endblock %}\n\n{% block content %}\n    \u003cform method=\"POST\"\u003e\n        \u003clabel for=\"title\"\u003eTitle\u003c/label\u003e\n        \u003cinput name=\"title\" id=\"title\" value=\"{{ request.form['title'] or post['title'] }}\" required\u003e\n        \u003clabel for=\"body\"\u003eBody\u003c/label\u003e\n        \u003ctextarea name=\"body\" id=\"body\"\u003e{{ request.form['body'] or post['body'] }}\u003c/textarea\u003e\n        \u003cinput type=\"submit\" value=\"Save\"\u003e\n    \u003c/form\u003e\n    \u003chr\u003e\n    \u003cform action=\"{{ url_for('blog.delete', id=post['id']) }}\" method=\"post\"\u003e\n        \u003cinput type=\"submit\" value=\"Delete\" class=\"danger\" onclick=\"return confirm('Are you sure?');\"\u003e\n    \u003c/form\u003e\n{% endblock %}\n```\n\n\n\nTips:\n\n* This templates has two forms:\n  * The first one to edit the current post(`/\u003cid\u003e/update`)\n  * The other one to delete the post\n* The pattern `{{ request.form['title'] or post['title'] }}` is used to choose what data appears in the form. \n  * When the form hasn’t been submitted, the original `post` data appears\n  * but if invalid form data was posted you want to display that so the user can fix the error, so `request.form` is used instead.\n\n\n\n#### Delete: view\n\nThe delete view has no template. Define it:\n\n```python\n@bp.route('/\u003cint:id\u003e/delete', methods=('POST',))\n@login_required\ndef delete(id):\n    get_post(id)\n    db = get_db()\n    db.execute('DELETE FROM post WHERE id = ?', (id,))\n    db.commit()\n    return redirect(url_for('blog.index'))\n\n```\n\n\n\nNow all code are finished. Try it!\n\n\n\nlog in \n\n![image-20221203225939183](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221203225939183.png)\n\n\n\nLog out\n\n![image-20221203230028831](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221203230028831.png)\n\n\n\nCreate a post\n\n![image-20221203230103978](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221203230103978.png)\n\n\n\nWriting\n\n![image-20221203230232647](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221203230232647.png)\n\n\n\nsaved\n\n![image-20221203230339421](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221203230339421.png)\n\nedit\n\n![image-20221203230548770](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221203230548770.png)\n\n\n\nGreat!\n","lastmodified":"2022-12-03T15:09:30.684222931Z","tags":null},"/notes/python-programming":{"title":"Python Programming","content":"\n# Python Programming\n\n## Flask\n\n* [Hands on Flask](notes/hands-on-flask.md)\n","lastmodified":"2022-12-03T15:09:30.684222931Z","tags":null}}