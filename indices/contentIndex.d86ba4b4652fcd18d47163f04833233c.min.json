{"/":{"title":"🪴 无人之路.","content":"\n\n欢迎来到“无人之路”，走进我的数字花园。在这里，我汇集、整理自己在数据系统、自动驾驶、个人管理、人生体悟等方面的涉猎和思考，构建自己的知识系统和精神世界。\n\n\n\n个人的角色是多重的，对应的精神世界应该是丰富的。我有下面的各种身份：\n\n* 长期来看，我是一个数据工程师，致力于构建数据系统，以辅助数据化决策和AI系统。\n* 短期来看，我在自动驾驶行业工作，帮助自动驾驶团队构建从数据采集、数据传输、数据存储、数据挖掘、数据标注到数据消费的data pipeline，以实现数据闭环，助力自动驾驶的研发。\n* 终身来看，我是一个丈夫、父亲和儿子，想要经营一个和谐、进取的家庭；其基石是：我是一个在思想上不断拓展、追求自由的个人。\n\n\n\n无论上面的哪一方面，想要做好，都要付出持续的努力，走上不断积累、不断精进的道路。我期待在这个小小的数字花园里，翻土、播种、浇水、修建、施肥、授粉，打理出属于自己的一片世界。\n\n\n\nMy Digital Garden include: \n\n* [Python Programming](notes/python-programming.md)\n* [Data System](notes/data-system.md)\n* [DevOps](notes/devops.md)\n\n","lastmodified":"2022-12-14T10:05:00.50340721Z","tags":null},"/notes/data-system":{"title":"Data System","content":"\n\n\n# Data System\n\n## Data Exploring \u0026 Visualization\n\n* [Hands on Zeppelin](notes/hands-on-zeppelin.md)","lastmodified":"2022-12-14T10:05:00.50340721Z","tags":null},"/notes/devops":{"title":"Data System","content":"\n# DevOps\n\n## Docker\n\n* [Docker入门：step by step](notes/hands-on-docker_1.md)\n* [Docker进阶：step by step](notes/hands-on-docker_2.md)","lastmodified":"2022-12-14T10:05:00.50340721Z","tags":null},"/notes/hands-on-docker_1":{"title":"Docker入门教程","content":"\n\n\n# Docker入门：step by step\n\n\u003e 为上手学习Docker，我参照阮一峰老师写的教程，step by step地动手实践。此文记录。\n\n## 参考\n\n[阮一峰：Docker入门教程](https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html)\n\n\n\n## 一、环境配置的难题\n\n软件开发最大的麻烦之一就是环境配置。每个人的机器的系统配置都不一样，包括操作系统、各种库与组件、环境变量等等。软件+运行环境，整体发布是解决这个问题的思路。Dockek是这种思路的实现。\n\n## 二、虚拟机\n\n在Docker之前，虚拟机是一种解决方案。但其缺点明显，包括：\n\n- **资源占用多**。虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。\n\n- **冗余步骤多**。虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。\n\n- **启动慢。**启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。\n\n## 三、Linux容器\n\nLinux容器（Linux Container， LXC）是另一种虚拟化技术。\n\n**Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。**或者说，在正常进程的外面套了一个[保护层](https://opensource.com/article/18/1/history-low-level-container-runtimes)。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。\n\n由于容器是进程级别的，相比虚拟机有很多优势。\n\n- **启动快。**容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。\n\n- **资源占用少。**容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。\n\n- **体积小。**容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。\n\n总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。\n\n## 四、Docker是什么？\n\n**Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。**它是目前最流行的 Linux 容器解决方案。\n\nDocker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。\n\n总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\n\n## 五、Docker的用途\n\nDocker 的主要用途，目前有三大类。\n\n- **提供一次性的环境。**比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。\n\n- **提供弹性的云服务。**因为 Docker 容器可以随开随关，很适合动态扩容和缩容。\n\n- **组建微服务架构。**通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。\n\n## 六、Docker 的安装\n\nDocker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。\n\nDocker CE 的安装请参考官方文档。\n\n\u003e - [Mac](https://docs.docker.com/docker-for-mac/install/)\n\u003e\n\u003e - [Windows](https://docs.docker.com/docker-for-windows/install/)\n\u003e\n\u003e - [Ubuntu](https://docs.docker.com/install/linux/docker-ce/ubuntu/)\n\u003e\n\u003e - 。。。\n\n安装完成后，运行下面的命令，验证是否安装成功。\n\n```Bash\n$ docker version\n# 或者\n$ docker info\n```\n\nDocker 需要用户具有 sudo 权限，为了避免每次命令都输入`sudo`，可以把用户加入 Docker 用户组（[官方文档](https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user)）。\n\n```Bash\nsudo usermod -aG docker $USER\n# 需要log out 才能生效，不让docker info命令的Sever部分会报错\n# 详情见：https://docs.docker.com/engine/install/linux-postinstall/\n```\n\nDocker 是服务器----客户端架构。命令行运行`docker`命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动（[官方文档](https://docs.docker.com/config/daemon/systemd/)）。\n\n```Bash\n# service 命令的用法\n$ sudo service docker start\n\n# systemctl 命令的用法\n$ sudo systemctl start docker\n```\n\n安装成功后，可以\n\n```bash\ndocker run hello-world\n```\n\n![image-20221214173436747](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221214173436747.png)\n\n```\ndocker run -it ubuntu bash\n```\n\n![img](https://j0tzfdufdk.feishu.cn/space/api/box/stream/download/asynccode/?code=NjFiOWIzZjQyNzU5M2FjNzk1OWE4MDJiOWQ4NjZiNDdfcUVQVEZMMzJoaUpIbmR3MHMwd1pmU0VhT0RGU002elNfVG9rZW46Ym94Y251TVdWN2hQV2VFY2gzT0ZQWFJGNjNlXzE2NzEwMTA1MDM6MTY3MTAxNDEwM19WNA)\n\n其中下载的image大小是30MB\n\n\u003e $ docker image ls\n\u003e\n\u003e REPOSITORY    TAG       IMAGE ID       CREATED         SIZE\n\u003e\n\u003e ubuntu        latest    df5de72bdb3b   2 weeks ago     77.8MB\n\u003e\n\u003e hello-world   latest    feb5d9fea6a5   11 months ago   13.3kB\n\n## 七、image 文件\n\n**Docker 把应用程序及其依赖，打包在 image 文件里面。**只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。\n\nimage 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。\n\nimage 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。\n\n为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 [Docker Hub](https://hub.docker.com/) 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。\n\n## 八、实例：hello world\n\n下面，我们通过最简单的 image 文件\"[hello world\"](https://hub.docker.com/r/library/hello-world/)，感受一下 Docker。\n\n需要说明的是，国内连接 Docker 的官方仓库很慢，还会断线，需要将默认仓库改成国内的镜像网站，具体的修改方法在[下一篇文章](https://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html)的第一节。有需要的朋友，可以先看一下。\n\n首先，运行下面的命令，将 image 文件从仓库抓取到本地。\n\n```Bash\n$ docker image pull library/hello-world\n```\n\n上面代码中，`docker image pull`是抓取 image 文件的命令。`library/hello-world`是 image 文件在仓库里面的位置，其中`library`是 image 文件所在的组，`hello-world`是 image 文件的名字。\n\n由于 Docker 官方提供的 image 文件，都放在`library`组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。\n\n```Bash\n$ docker image pull hello-world\n```\n\n抓取成功以后，就可以在本机看到这个 image 文件了。\n\n```Bash\n$ docker image ls\n```\n\n现在，运行这个 image 文件。\n\n```Bash\n$ docker container run hello-world\n```\n\n`docker container run`命令会从 image 文件，生成一个正在运行的容器实例。\n\n注意，`docker container run`命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的`docker image pull`命令并不是必需的步骤。\n\n如果运行成功，你会在屏幕上读到下面的输出。\n\n```Bash\n$ docker container run hello-world\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.... ...\n```\n\n输出这段提示以后，`hello world`就会停止运行，容器自动终止。\n\n有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。\n\n```Bash\n$ docker container run -it ubuntu bash\n```\n\n对于那些不会自动终止的容器，必须使用`docker container kill` 命令手动终止。\n\n```Bash\n$ docker container kill [containID]\n\n## 如下例子\n$ docker container ls\nCONTAINER ID   IMAGE     COMMAND   CREATED          STATUS          PORTS     NAMES\nf45ef5fcc683   ubuntu    \"bash\"    21 minutes ago   Up 21 minutes             charming_montalcini\n\n# happy3 @ happy3-HX in ~ [15:46:39] \n$ docker kill f45ef5fcc683\nf45ef5fcc683\n\n# happy3 @ happy3-HX in ~ [15:46:47] \n$ docker container ls     \nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n\n# happy3 @ happy3-HX in ~ [15:46:54] \n$ \n```\n\n## 九、容器文件\n\n**image 文件生成的容器实例，本身也是一个文件，称为容器文件。**也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。\n\n上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的`docker container kill`命令。\n\n终止运行的容器文件，依然会占据硬盘空间，可以使用`docker container rm`命令删除。\n\n```Bash\n$ docker container rm [containerID]\n```\n\n运行上面的命令之后，再使用`docker container ls --all`命令，就会发现被删除的容器文件已经消失了。\n\n## 十、Dockerfile 文件\n\n学会使用 image 文件以后，接下来的问题就是，如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。\n\n这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。\n\n下面通过一个实例，演示如何编写 Dockerfile 文件。\n\n## 十一、实例：制作自己的 Docker 容器\n\n下面我以 [koa-demos](https://www.ruanyifeng.com/blog/2017/08/koa.html) 项目为例，介绍怎么写 Dockerfile 文件，实现让用户在 Docker 容器里面运行 Koa 框架。\n\n作为准备工作，请先[下载源码](https://github.com/ruanyf/koa-demos/archive/master.zip)。\n\n```Bash\n$ git clone https://github.com/ruanyf/koa-demos.git\n$ cd koa-demos\n```\n\n#### 11.1 编写 Dockerfile 文件\n\n首先，在项目的根目录下，新建一个文本文件`.dockerignore`，写入下面的[内i容](https://github.com/ruanyf/koa-demos/blob/master/.dockerignore)。\n\n```Bash\n.git\nnode_modules\nnpm-debug.log\n```\n\n上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。\n\n然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的[内容](https://github.com/ruanyf/koa-demos/blob/master/Dockerfile)。\n\n```Bash\nFROM node:8.4\nCOPY . /app\nWORKDIR /app\nRUN npm install --registry=https://registry.npm.taobao.org\nEXPOSE 3000\n```\n\n上面代码一共五行，含义如下。\n\n\u003e - `FROM node:8.4`：该 image 文件继承官方的 node image，冒号表示标签，这里标签是`8.4`，即8.4版本的 node。\n\u003e\n\u003e - `COPY . /app`：将当前目录下的所有文件（除了`.dockerignore`排除的路径），都拷贝进入 image 文件的`/app`目录。\n\u003e\n\u003e - `WORKDIR /app`：指定接下来的工作路径为`/app`。\n\u003e\n\u003e - `RUN npm install`：在`/app`目录下，运行`npm install`命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。\n\u003e\n\u003e - `EXPOSE 3000`：将容器 3000 端口暴露出来， 允许外部连接这个端口。\n\n#### 11.2 创建 image 文件\n\n有了 Dockerfile 文件以后，就可以使用`docker image build`命令创建 image 文件了。\n\n```Bash\n$ docker image build -t koa-demo .\n# 或者\n$ docker image build -t koa-demo:0.0.1 .\n```\n\n上面代码中，`-t`参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是`latest`。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。\n\n如果运行成功，就可以看到新生成的 image 文件`koa-demo`了。\n\n```Bash\n$ docker image ls\n```\n\n![img](https://j0tzfdufdk.feishu.cn/space/api/box/stream/download/asynccode/?code=MzYxMzM4ODE4NDUzYmE0YjYxNTc5OTFlZTUwY2E1YzBfNTNROGhKNEh3cHp2MW1CUFQ1N3BuYVNUUU9EZ1FySWJfVG9rZW46Ym94Y25LR0tnREtkcGJ1M1dTVk9HN3JuZUxnXzE2NzEwMTA1MDM6MTY3MTAxNDEwM19WNA)\n\n#### 11.3 生成容器\n\n`docker container run`命令会从 image 文件生成容器。\n\n```Bash\n$ docker container run -p 8000:3000 -it koa-demo /bin/bash\n# 或者\n$ docker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash\n```\n\n上面命令的各个参数含义如下：\n\n\u003e - `-p`参数：容器的 3000 端口映射到本机的 8000 端口。\n\u003e\n\u003e - `-it`参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。\n\u003e\n\u003e - `koa-demo:0.0.1`：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。\n\u003e\n\u003e - `/bin/bash`：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。\n\n如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。\n\n```Bash\nroot@66d80f4aaf1e:/app#\n```\n\n这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。\n\n```Bash\nroot@66d80f4aaf1e:/app# node demos/01.js\n```\n\n这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 http://127.0.0.1:8000，网页显示\"Not Found\"，这是因为这个 [demo](https://github.com/ruanyf/koa-demos/blob/master/demos/01.js) 没有写路由。\n\n这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）。\n\n现在，在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。此外，也可以用`docker container kill`终止容器运行。\n\n```Bash\n# 在本机的另一个终端窗口，查出容器的 ID\n$ docker container ls\n\n# 停止指定的容器运行\n$ docker container kill [containerID]\n```\n\n容器停止运行之后，并不会消失，用下面的命令删除容器文件。\n\n```Bash\n# 查出容器的 ID\n$ docker container ls --all\n\n# 删除指定的容器文件\n$ docker container rm [containerID]\n```\n\n也可以使用`docker container run`命令的`--rm`参数，在容器终止运行后自动删除容器文件。\n\n```Bash\n$ docker container run --rm -p 8000:3000 -it koa-demo /bin/bash\n```\n\n#### 11.4 CMD 命令\n\n上一节的例子里面，容器启动以后，需要手动输入命令`node demos/01.js`。我们可以把这个命令写在 Dockerfile 里面，这样容器启动以后，这个命令就已经执行了，不用再手动输入了。\n\n```Bash\nFROM node:8.4\nCOPY . /app\nWORKDIR /app\nRUN npm install --registry=https://registry.npm.taobao.org\nEXPOSE 3000\nCMD node demos/01.js\n```\n\n上面的 Dockerfile 里面，多了最后一行`CMD node demos/01.js`，它表示容器启动后自动执行`node demos/01.js`。\n\n你可能会问，`RUN`命令与`CMD`命令的区别在哪里？简单说，`RUN`命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；`CMD`命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个`RUN`命令，但是只能有一个`CMD`命令。\n\n注意，指定了`CMD`命令以后，`docker container run`命令就不能附加命令了（比如前面的`/bin/bash`），否则它会覆盖`CMD`命令。现在，启动容器可以使用下面的命令。\n\n```Bash\n$ docker container run --rm -p 8000:3000 -it koa-demo:0.0.1\n```\n\n#### 11.5 发布 image 文件\n\n容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。\n\n首先，去 [hub.docker.com](https://hub.docker.com/) 或 [cloud.docker.com](https://cloud.docker.com/) 注册一个账户。然后，用下面的命令登录。\n\n```Bash\n$ docker login\n```\n\n接着，为本地的 image 标注用户名和版本。\n\n```Bash\n$ docker image tag [imageName] [username]/[repository]:[tag]\n# 实例\n$ docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1\n```\n\n也可以不标注用户名，重新构建一下 image 文件。\n\n```Bash\n$ docker image build -t [username]/[repository]:[tag] .\n```\n\n最后，发布 image 文件。\n\n```Bash\n$ docker image push [username]/[repository]:[tag]\n```\n\n发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。\n\n### 十二、其他有用的命令\n\ndocker 的主要用法就是上面这些，此外还有几个命令，也非常有用。\n\n**（1）docker container start**\n\n前面的`docker container run`命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用`docker container start`命令，它用来启动已经生成、已经停止运行的容器文件。\n\n```Bash\n$ docker container start [containerID]\n```\n\n**（2）docker container stop**\n\n前面的`docker container kill`命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而`docker container stop`命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。\n\n```Bash\n$ docker container stop [containerID]\n```\n\n这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。\n\n**（3）docker container logs**\n\n`docker container logs`命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果`docker run`命令运行容器的时候，没有使用`-it`参数，就要用这个命令查看输出。\n\n```Bash\n$ docker container logs [containerID]\n```\n\n**（4）docker container exec**\n\n`docker container exec`命令用于进入一个正在运行的 docker 容器。如果`docker run`命令运行容器的时候，没有使用`-it`参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。\n\n```Bash\n$ docker container exec -it [containerID] /bin/bash\n```\n\n**（5）docker container cp**\n\n`docker container cp`命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。\n\n```Bash\n$ docker container cp [containID]:[/path/to/file] .\n```\n\n\n\nDone!\n\n进一步实践，参考：\n\n* [Docker进阶：step by step](notes/hands-on-docker_2.md)\n\n","lastmodified":"2022-12-14T10:05:00.50340721Z","tags":null},"/notes/hands-on-docker_2":{"title":"Docker入门教程","content":"\n# Docker进阶：step by step\n\n## 0. 参考\n\n[Docker 微服务教程](https://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html)\n\n前置教程：\n\n* [Docker入门：step by step](notes/hands-on-docker_1.md)\n\n### 一、预备工作：image 仓库的镜像网址\n\n本教程需要从仓库下载 image 文件，但是国内访问 Docker 的官方仓库很慢，还经常断线，所以要把仓库网址改成国内的镜像站。这里推荐使用官方镜像 registry.docker-cn.com 。下面是我的 Debian 系统的默认仓库修改方法，其他系统的修改方法参考[官方文档](https://www.docker-cn.com/registry-mirror)。\n\n打开`/etc/default/docker`文件（需要`sudo`权限），在文件的底部加上一行。\n\n```Bash\nDOCKER_OPTS=\"--registry-mirror=https://registry.docker-cn.com\"\n```\n\n然后，重启 Docker 服务。\n\n```Bash\n$ sudo service docker restart\n```\n\n现在就会自动从镜像仓库下载 image 文件了。\n\n### 二、方法 A：自建 WordPress 容器\n\n前面说过，本文会用三种方法演示 WordPress 的安装。第一种方法就是自建 WordPress 容器。\n\n#### 2.1 官方 的 PHP image\n\n首先，新建一个工作目录，并进入该目录。\n\n```Bash\n$ mkdir docker-demo \u0026\u0026 cd docker-demo\n```\n\n然后，执行下面的命令。\n\n```Bash\ndocker container run \\\n  --rm \\\n  --name wordpress \\\n  --volume \"$PWD/\":/var/www/html \\\n  php:5.6-apache\n```\n\n上面的命令基于`php`的 image 文件新建一个容器，并且运行该容器。`php`的标签是`5.6-apache`，说明装的是 PHP 5.6，并且自带 Apache 服务器。该命令的三个参数含义如下。\n\n```Bash\n--rm：停止运行后，自动删除容器文件。\n--name wordpress：容器的名字叫做wordpress。\n--volume \"$PWD/\":/var/www/html：将当前目录（$PWD）映射到容器的/var/www/html（Apache 对外访问的默认目录）。因此，当前目录的任何修改，都会反映到容器里面，进而被外部访问到。\n```\n\n运行上面的命令以后，如果一切正常，命令行会提示容器对外的 IP 地址，请记下这个地址，我们要用它来访问容器。我分配到的 IP 地址是 172.17.0.2。\n\n打开浏览器，访问 172.17.0.2，你会看到下面的提示。\n\n```Bash\nForbidden\nYou don't have permission to access / on this server.\n```\n\n是因为容器的`/var/www/html`目录（也就是本机的`docker-demo`目录）下面什么也没有，无法提供可以访问的内容。\n\n请在本机的`docker-demo`目录下面，添加一个最简单的 PHP 文件`index.php`。\n\n```Bash\n\u003c?php \nphpinfo();\n?\u003e\n```\n\n保存以后，浏览器刷新`172.17.0.2`，应该就会看到熟悉的`phpinfo`页面了。\n\n![img](https://j0tzfdufdk.feishu.cn/space/api/box/stream/download/asynccode/?code=MTE1MTExN2M2NjUzYTQzYjIyNmZhMmUxMDRmMGQwYzZfMUdteFNRN2NnaHBERTZVdDQzYVFKbkxKT29QQmZybWtfVG9rZW46Ym94Y25uV2xkc2J6SDJhd0hGaTlhU25BbE5oXzE2NzEwMTE4MDE6MTY3MTAxNTQwMV9WNA)\n\n#### 2.2 拷贝 WordPress 安装包\n\n既然本地的`docker-demo`目录可以映射到容器里面，那么把 WordPress 安装包拷贝到`docker-demo`目录下，不就可以通过容器访问到 WordPress 的安装界面了吗？\n\n首先，在`docker-demo`目录下，执行下面的命令，抓取并解压 WordPress 安装包。\n\n```Bash\nwget https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz\ntar -xvf wordpress-4.9.4-zh_CN.tar.gz\n```\n\n解压以后，WordPress 的安装文件会在`docker-demo/wordpress`目录下。\n\n这时浏览器访问`http://172.17.0.2/wordpress`，就能看到 WordPress 的安装提示了。\n\n![img](https://j0tzfdufdk.feishu.cn/space/api/box/stream/download/asynccode/?code=MDkxMGFmNzI3MjA2MWIxZmUyNTFjZTAyYWNkMzNkY2RfUlZOM2hEQTFHZkhwTlRHd0QzdGFmQTQxcklIaW9WUmhfVG9rZW46Ym94Y25DcU43NHE5SkM1TEF1UEJ2dE95eWdmXzE2NzEwMTE4MDE6MTY3MTAxNTQwMV9WNA)\n\n#### 2.3 官方的 MySQL 容器\n\nWordPress 必须有数据库才能安装，所以必须新建 MySQL 容器。\n\n打开一个新的命令行窗口，执行下面的命令。\n\n```Bash\ndocker container run \\\n  -d \\\n  --rm \\\n  --name wordpressdb \\\n  --env MYSQL_ROOT_PASSWORD=123456 \\\n  --env MYSQL_DATABASE=wordpress \\\n  mysql:5.7\n```\n\n上面的命令会基于 MySQL 的 image 文件（5.7版本）新建一个容器。该命令的五个命令行参数的含义如下。\n\n\u003e - `-d`：容器启动后，在后台运行。\n\u003e\n\u003e - `--rm`：容器终止运行后，自动删除容器文件。\n\u003e\n\u003e - `--name wordpressdb`：容器的名字叫做`wordpressdb`\n\u003e\n\u003e - `--env MYSQL_ROOT_PASSWORD=123456`：向容器进程传入一个环境变量`MYSQL_ROOT_PASSWORD`，该变量会被用作 MySQL 的根密码。\n\u003e\n\u003e - `--env MYSQL_DATABASE=wordpress`：向容器进程传入一个环境变量`MYSQL_DATABASE`，容器里面的 MySQL 会根据该变量创建一个同名数据库（本例是`WordPress`）。\n\n运行上面的命令以后，正常情况下，命令行会显示一行字符串，这是容器的 ID，表示已经新建成功了。\n\n这时，使用下面的命令查看正在运行的容器，你应该看到`wordpress`和`wordpressdb`两个容器正在运行。\n\n```Bash\ndocker container ls\nCONTAINER ID   IMAGE            COMMAND                  CREATED          STATUS          PORTS                 NAMES\nf01fe6ff7a31   mysql:5.7        \"docker-entrypoint.s…\"   15 seconds ago   Up 13 seconds   3306/tcp, 33060/tcp   wordpressdb\nb62e97351f5f   php:5.6-apache   \"docker-php-entrypoi…\"   32 seconds ago   Up 30 seconds   80/tcp                wordpress\n```\n\n其中，`wordpressdb`是后台运行的，前台看不见它的输出，必须使用下面的命令查看。\n\n```Bash\ndocker container logs wordpressdb\n```\n\n#### 2.4 定制 PHP 容器\n\n现在 WordPress 容器和 MySQL 容器都已经有了。接下来，要把 WordPress 容器连接到 MySQL 容器了。但是，PHP 的官方 image 不带有`mysql`扩展，必须自己新建 image 文件。\n\n首先，停掉 WordPress 容器。\n\n```Bash\ndocker container stop wordpress\n\n## 停掉之后\ndocker container ls              \nCONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS                 NAMES\nf01fe6ff7a31   mysql:5.7   \"docker-entrypoint.s…\"   3 minutes ago   Up 3 minutes   3306/tcp, 33060/tcp   wordpressdb\n```\n\n停掉以后，由于`--rm`参数的作用，该容器文件会被自动删除。\n\n然后，在`docker-demo`目录里面，新建一个`Dockerfile`文件，写入下面的内容。\n\n```Bash\nFROM php:5.6-apache\nRUN docker-php-ext-install mysqli\nCMD apache2-foreground\n```\n\n上面代码的意思，就是在原来 PHP 的 image 基础上，安装`mysqli`的扩展。然后，启动 Apache。\n\n基于这个 Dockerfile 文件，新建一个名为`phpwithmysql`的 image 文件。\n\n```Bash\ndocker build -t phpwithmysql .\n```\n\n#### 2.5 Wordpress 容器连接 MySQL\n\n现在基于 phpwithmysql image，重新新建一个 WordPress 容器。\n\n```Bash\ndocker container run \\\n  --rm \\\n  --name wordpress \\\n  --volume \"$PWD/\":/var/www/html \\\n  --link wordpressdb:mysql \\\n  phpwithmysql\n```\n\n跟上一次相比，上面的命令多了一个参数`--link wordpressdb:mysql`，表示 WordPress 容器要连到`wordpressdb`容器，冒号表示该容器的别名是`mysql`。\n\n这时还要改一下`wordpress`目录的权限，让容器可以将配置信息写入这个目录（容器内部写入的`/var/www/html`目录，会映射到这个目录）。\n\n```Bash\nchmod -R 777 wordpress\n```\n\n接着，回到浏览器的`http://172.17.0.2/wordpress`页面，点击\"现在就开始！\"按钮，开始安装。\n\nWordPress 提示要输入数据库参数。输入的参数如下。\n\n![img](https://j0tzfdufdk.feishu.cn/space/api/box/stream/download/asynccode/?code=MzEyYjA2NmVmMDE0NWU3N2ExZGU2ZjAyZWFmYTlhODVfd29RTHdycHluMURNUG9XZlZxS2FKTld4Nk1iZXk4a1dfVG9rZW46Ym94Y254YWVpSmRCM21qUElZZ0RIWmRpODVkXzE2NzEwMTE4MDE6MTY3MTAxNTQwMV9WNA)\n\n\u003e - 数据库名：`wordpress`\n\u003e\n\u003e - 用户名：`root`\n\u003e\n\u003e - 密码：`123456`\n\u003e\n\u003e - 数据库主机：`mysql`\n\u003e\n\u003e - 表前缀：`wp_`（不变）\n\n点击\"下一步\"按钮，如果 Wordpress 连接数据库成功，就会出现下面的页面，这就表示可以安装了。\n\n![img](https://j0tzfdufdk.feishu.cn/space/api/box/stream/download/asynccode/?code=MDFjODhjOWEzZGJhNTc0MWJjMTI2ZmE1ZWM4ZTVlYTlfRnpyN2xadDJZMzJiSWszMlhWVk00NjV5dzZJYm1ZZjBfVG9rZW46Ym94Y25wbk1oZ3NieVNWVDlucWxHWFJRbGVlXzE2NzEwMTE4MDE6MTY3MTAxNTQwMV9WNA)\n\n至此，自建 WordPress 容器的演示完毕，可以把正在运行的两个容器关闭了（容器文件会自动删除）。\n\n![img](https://j0tzfdufdk.feishu.cn/space/api/box/stream/download/asynccode/?code=NTk1ZTQ1MDhiOTI4MTE1MzIzZjZlMTI3ODJjODAyZWVfSmRHcWdKc09oRDJXMElHZ0N1WWU5YzhKNk05STN4ODFfVG9rZW46Ym94Y255T2lCVWpmd2NOaFppQUlxZEtUYk5oXzE2NzEwMTE4MDE6MTY3MTAxNTQwMV9WNA)\n\n安装之后\n\n![img](https://j0tzfdufdk.feishu.cn/space/api/box/stream/download/asynccode/?code=MzkwYTg5NzQwMzJlYzAyZTNlNWI0MGI2MDBiYWZhZDZfWUdBd1VrV2tXNk4xc0RRNU5WeVB2M2hNbXJEYnJZcG1fVG9rZW46Ym94Y25tUExQRGUxMnp0dkI0WXhsbXJ6bU9oXzE2NzEwMTE4MDE6MTY3MTAxNTQwMV9WNA)\n\n```Bash\ndocker container stop wordpress wordpressdb\n\n## 之后\ndocker container ls\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n```\n\n### 三、方法 B：Wordpress 官方镜像\n\n上一部分的自建 WordPress 容器，还是挺麻烦的。其实不用这么麻烦，Docker 已经提供了官方 [WordPress](https://hub.docker.com/_/wordpress/) image，直接用那个就可以了。有了上一部分的基础，下面的操作就很容易理解了。\n\n \n\n#### 3.1 基本用法\n\n首先，新建并启动 MySQL 容器。\n\n```Bash\ndocker container run \\\n  -d \\\n  --rm \\\n  --name wordpressdb \\\n  --env MYSQL_ROOT_PASSWORD=123456 \\\n  --env MYSQL_DATABASE=wordpress \\\n  mysql:5.7\n```\n\n然后，基于官方的 WordPress image，新建并启动 WordPress 容器。\n\n```Bash\ndocker container run \\\n  -d \\\n  --rm \\\n  --name wordpress \\\n  --env WORDPRESS_DB_PASSWORD=123456 \\\n  --env WORDPRESS_DB_USER=root \\\n  --link wordpressdb:mysql \\\n  wordpress\n```\n\n上面命令中，各个参数的含义前面都解释过了，其中环境变量`WORDPRESS_DB_PASSWORD`是 MySQL 容器的根密码。\n\n```Bash\ndocker container ls   \nCONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                 NAMES\nad6ee2dd4971   wordpress   \"docker-entrypoint.s…\"   48 seconds ago   Up 35 seconds   80/tcp                wordpress\n87f2d581abda   mysql:5.7   \"docker-entrypoint.s…\"   3 minutes ago    Up 3 minutes    3306/tcp, 33060/tcp   wordpressdb\n```\n\n上面命令指定`wordpress`容器在后台运行，导致前台看不见输出，使用下面的命令查出`wordpress`容器的 IP 地址。\n\n```Bash\ndocker container inspect wordpress\n[\n    {\n        \"Id\": \"ad6ee2dd497184a397c8bd58df7b415b5081bff5b0e000a10daa0b970b38cf9c\",\n        \"Created\": \"2022-08-26T02:16:36.222826772Z\",\n        \"Path\": \"docker-entrypoint.sh\",\n        \"Args\": [\n            \"apache2-foreground\"\n        ],\n   。。。\n            \"GlobalIPv6PrefixLen\": 0,\n            \"IPAddress\": \"172.17.0.3\",\n            \"IPPrefixLen\": 16,\n            \"IPv6Gateway\": \"\",\n   。。。\n    }\n]\n```\n\n上面命令运行以后，会输出很多内容，找到`IPAddress`字段即可。我的机器返回的 IP 地址是`172.17.0.3`。\n\n浏览器访问`172.17.0.3`，就会看到 WordPress 的安装提示。\n\n![img](https://j0tzfdufdk.feishu.cn/space/api/box/stream/download/asynccode/?code=NjM4MmQ0MzQ2OGU1NTgzM2ZmM2NkNmJkMzY2M2QyMzdfVVY4dUdnQ1F0ZWM5OW1GaGFZVTFGZ0ZyUkVZRGY0aW5fVG9rZW46Ym94Y25kSURBVXN5NUdndWFBTjlDUTFrdGdkXzE2NzEwMTE4MDE6MTY3MTAxNTQwMV9WNA)\n\n#### 3.2 WordPress 容器的定制\n\n到了上一步，官方 WordPress 容器的安装就已经成功了。但是，这种方法有两个很不方便的地方。\n\n\u003e - 每次新建容器，返回的 IP 地址不能保证相同，导致要更换 IP 地址访问 WordPress。\n\u003e\n\u003e - WordPress 安装在容器里面，本地无法修改文件。\n\n解决这两个问题很容易，只要新建容器的时候，加两个命令行参数就可以了。\n\n先把刚才启动的 WordPress 容器终止（容器文件会自动删除）。\n\n```Bash\ndocker container stop wordpress\n```\n\n然后，使用下面的命令新建并启动 WordPress 容器。\n\n```Bash\ndocker container run \\\n  -d \\\n  -p 127.0.0.2:8080:80 \\\n  --rm \\\n  --name wordpress \\\n  --env WORDPRESS_DB_PASSWORD=123456 \\\n  --env WORDPRESS_DB_USER=root \\\n  --link wordpressdb:mysql \\\n  --volume \"$PWD/wordpress\":/var/www/html \\\n  wordpress\n```\n\n上面的命令跟前面相比，命令行参数只多出了两个。\n\n\u003e - `-p 127.0.0.2:8080:80`：将容器的 80 端口映射到`127.0.0.2`的`8080`端口。\n\u003e\n\u003e - `--volume \"$PWD/wordpress\":/var/www/html`：将容器的`/var/www/html`目录映射到当前目录的`wordpress`子目录。\n\n浏览器访问`127.0.0.2:8080`就能看到 WordPress 的安装提示了。而且，你在`wordpress`子目录下的每次修改，都会反映到容器里面。\n\n![img](https://j0tzfdufdk.feishu.cn/space/api/box/stream/download/asynccode/?code=NTY2NGJjYjUxM2ViNjM0YjEzNTQ3MzQ0YWJlMmVlMmJfVm9nVzRRVkRVcmtUcDJUQzBmVDR2OVhTNnJxeVdYY2VfVG9rZW46Ym94Y25lYzlUMW1meUlLNXdEWGREVFZIUmJnXzE2NzEwMTE4MDE6MTY3MTAxNTQwMV9WNA)\n\n最后，终止这两个容器（容器文件会自动删除）。\n\n```Bash\ndocker container stop wordpress wordpressdb\n```\n\n### 四、方法 C：Docker Compose 工具\n\n上面的方法 B 已经挺简单了，但是必须自己分别启动两个容器，启动的时候，还要在命令行提供容器之间的连接信息。因此，Docker 提供了一种更简单的方法，来管理多个容器的联动。\n\n#### 4.1 Docker Compose 简介\n\n \n\n![img](https://j0tzfdufdk.feishu.cn/space/api/box/stream/download/asynccode/?code=MGZjZTA4YTllOTk0MDZlYjY3ZDI1NzUyZDUyNmU1MTlfU3pPR0Y0ZjlCQjBMWjZXMW9uQ0FvUFlzdmFuM2xLZVpfVG9rZW46Ym94Y25Nbk9lYm55UUNPaUc1bnpoRjA5QktRXzE2NzEwMTE4MDE6MTY3MTAxNTQwMV9WNA)\n\n[Compose](https://docs.docker.com/compose/) 是 Docker 公司推出的一个工具软件，可以管理多个 Docker 容器组成一个应用。你需要定义一个 [YAML](https://www.ruanyifeng.com/blog/2016/07/yaml.html) 格式的配置文件`docker-compose.yml`，写好多个容器之间的调用关系。然后，只要一个命令，就能同时启动/关闭这些容器。\n\n```Bash\n# 启动所有服务\ndocker compose up\n# 关闭所有服务\ndocker compose stop\n```\n\n#### 4.2 Docker Compose 的安装\n\nMac 和 Windows 在安装 docker 的时候，会一起安装 docker compose。Linux 系统下的安装参考[官方文档](https://docs.docker.com/compose/install/#install-compose)。\n\n安装完成后，运行下面的命令。\n\n```Bash\ndocker compose version\nDocker Compose version v2.6.0\n```\n\n#### 4.3 WordPress 示例\n\n在`docker-demo`目录下，新建`docker-compose.yml`文件，写入下面的内容。\n\n```Bash\nversion: \"3\"\n\nservices:\n  mysql:\n    image: mysql:5.7\n    environment:\n     - MYSQL_ROOT_PASSWORD=123456\n     - MYSQL_DATABASE=wordpress\n  web:\n    image: wordpress\n    links:\n     - mysql\n    environment:\n     - WORDPRESS_DB_PASSWORD=123456\n     - WORDPRESS_DB_USER=root\n    ports:\n     - \"127.0.0.3:8080:80\"\n    working_dir: /var/www/html\n```\n\n上面代码中，两个顶层标签表示有两个容器`mysql`和`web`。每个容器的具体设置，前面都已经讲解过了，还是挺容易理解的。\n\n启动两个容器。 \n\n```Bash\ndocker compose up\n```\n\n浏览器访问 http://127.0.0.3:8080，应该就能看到 WordPress 的安装界面。\n\n![img](https://j0tzfdufdk.feishu.cn/space/api/box/stream/download/asynccode/?code=YTYyMWNjMTE5ZDJiN2E3NmM2ZjQ5ZTkzZjk5NTZlZjlfQnEwYXgxZlRYTVBmeU5hU2RFaGRoNm9jekdCZmtldzFfVG9rZW46Ym94Y25tUkxqcm04YlRoZzI5Z3BRWHRwUFdlXzE2NzEwMTE4MDE6MTY3MTAxNTQwMV9WNA)\n\n现在关闭两个容器。\n\n```Bash\ndocker compose stop\n```\n\n关闭以后，这两个容器文件还是存在的，写在里面的数据不会丢失。下次启动的时候，还可以复用。下面的命令可以把这两个容器文件删除（容器必须已经停止运行）。\n\n```Bash\ndocker compose rm\n```\n\n### 五、参考链接\n\n- [How to Manually Build Docker Containers for WordPress](https://www.sitepoint.com/how-to-manually-build-docker-containers-for-wordpress/), by Aleksander Koko\n\n- [How to Use the Official Docker WordPress Image](https://www.sitepoint.com/how-to-use-the-official-docker-wordpress-image/), by Aleksander Koko\n\n- [Deploying WordPress with Docker](https://www.sitepoint.com/deploying-wordpress-with-docker/), by Aleksander Koko\n\n","lastmodified":"2022-12-14T10:05:00.50340721Z","tags":null},"/notes/hands-on-flask":{"title":"Hands on Flask","content":"\n# Hands on Flask: step by step\n\n\u003e I am a newcomer of Flask. So I follow the official tutorial to build a blog post web application step by step.\n\n\n\n## Reference\n\n[Flask Installation](https://flask.palletsprojects.com/en/2.2.x/installation/)\n\n[Flask Tutorial](https://flask.palletsprojects.com/en/2.2.x/tutorial/)\n\nFollow the tutorial to build a blog web app like:\n\n\n\n![image-20221201145000837](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221201145000837.png)\n\n\n\n## Step by Step\n\n### Step 0.Backgroud\n\nbuild a basic blog application called Flaskr using Flask.\n\n\n\n### Step 1. Project Layout\n\n#### Create a project directory\n\n```shell\nmkdir flask-tutorial\ncd flask-tutorial/\n```\n\n\n\n#### Install Flask\n\n[Flask Installation Doc ](https://flask.palletsprojects.com/en/2.2.x/installation/)\n\nCreate an python environment using [venv](https://docs.python.org/3/library/venv.html#module-venv):\n\n```shell\n$ python3 -m venv venv\n\n$ tree . -L 3\n.\n└── venv\n    ├── bin\n    │   ├── Activate.ps1\n    │   ├── activate\n    │   ├── activate.csh\n    │   ├── activate.fish\n    │   ├── pip\n    │   ├── pip3\n    │   ├── pip3.9\n    │   ├── python -\u003e python3\n    │   ├── python3 -\u003e /Users/yangls06/opt/miniconda3/bin/python3\n    │   └── python3.9 -\u003e python3\n    ├── include\n    ├── lib\n    │   └── python3.9\n    └── pyvenv.cfg\n\n5 directories, 11 files\n\n$ tree venv/lib/python3.9/ -L 3\nvenv/lib/python3.9/\n└── site-packages\n    ├── _distutils_hack\n    │   ├── __init__.py\n    │   ├── __pycache__\n    │   └── override.py\n    ├── distutils-precedence.pth\n    ├── pip\n    │   ├── __init__.py\n    │   ├── __main__.py\n        ...\n    ├── pkg_resources\n    ...\n```\n\n\n\nActivate the environment\n\n```shell\n$ . venv/bin/activate\n```\n\nThen the environment has been changed.\n\n![image-20221201153333547](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221201153333547.png)\n\nInstall Flask\n\nWithin the activated environment, install Flask using `pip`:\n\n```shell\n$ pip install Flask\n\nLooking in indexes: https://pypi.douban.com/simple\nCollecting Flask\n  Downloading https://pypi.doubanio.com/packages/0f/43/15f4f9ab225b0b25352412e8daa3d0e3d135fcf5e127070c74c3632c8b4c/Flask-2.2.2-py3-none-any.whl (101 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 101.5/101.5 KB 1.8 MB/s eta 0:00:00\n...\nCollecting MarkupSafe\u003e=2.0\n  Downloading https://pypi.doubanio.com/packages/06/7f/d5e46d7464360b6ac39c5b0b604770dba937e3d7cab485d2f3298454717b/MarkupSafe-2.1.1-cp39-cp39-macosx_10_9_universal2.whl (17 kB)\nInstalling collected packages: zipp, MarkupSafe, itsdangerous, click, Werkzeug, Jinja2, importlib-metadata, Flask\nSuccessfully installed Flask-2.2.2 Jinja2-3.1.2 MarkupSafe-2.1.1 Werkzeug-2.2.2 click-8.1.3 importlib-metadata-5.1.0 itsdangerous-2.1.2 zipp-3.11.0\n```\n\n\n\nGit init\n\n```shell\n$ git init\n```\n\n\n\nwith `.gitignore`\n\n```\nvenv/\n\n*.pyc\n__pycache__/\n\ninstance/\n\n.pytest_cache/\n.coverage\nhtmlcov/\n\ndist/\nbuild/\n*.egg-info/\n```\n\n\n\nAdd folders\n\n```shell\n$ tree -a -L 1\n.\n├── .git\n├── .gitignore\n├── flaskr\n├── tests\n└── venv\n\n4 directories, 1 file\n```\n\n\n\n### Step 3. Application Setup\n\n#### The Application Factory: \\__init__.py\n\n* create `Flask` instance \n* make `flaskr` directory a package\n\n```python\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n\n\"\"\"\n@Time    :   2022/12/01 15:58:24\n@Author  :   Linsan Yang \n@Desc    :   init flaskr\n\"\"\"\n\nimport os\nfrom flask import Flask\n\ndef create_app(test_config=None):\n    # create and configure the app\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRET_KEY = 'dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not testing\n        app.config.from_pyfile('config.py', silent=True)\n    else:\n        # load the test config if passed in\n        app.config.from_mapping(test_config)\n    \n    # ensure the instance folder exists\n    try:\n        os.makedirs(app.instance_path)\n    except OSError as e:\n        pass\n\n    # a simple page that says hello\n    @app.route('/hello')\n    def hello():\n        return 'Hello, World!'\n\n    return app\n\n```\n\n\n\n**instance folder** \n\nThere will be a `instance/`directory, located outside the `flaskr` package and can hold local data that shouldn’t be committed to version control, such as configuration secrets and the database file.\n\n\n\n**test_config**\n\nUsing test_config for testing.\n\n\n\n**@app.route()**\n\ncreate a simple route of `/hello`\n\n\n\n#### Run The Application\n\nIn the `flask-tutorial` dir not `flaskr` package:\n\n```shell\n$ flask --app flaskr --debug run\n * Serving Flask app 'flaskr'\n * Debug mode: on\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nPress CTRL+C to quit\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 134-914-837\n```\n\nThen open 127.0.0.1:5000/hello in browser, got\n\n![image-20221201162507048](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221201162507048.png)\n\n### Step 4. Define and Access the Database\n\nThe app will use `Sqlite` database to store users and posts. Python has a built-in module `sqlite3` module.\n\n#### Connect to Sqlite\n\nflaskr/db.py\n\n```python\nimport sqlite3\n\nimport click\nfrom flask import current_app, g\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(\n            current_app.config['DATABASE'],\n            detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n    return g.db\n\ndef close_db(e=None):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n```\n\n\n\n`g` is a spectial object for each request to share data among different functions. `current_app` is similar.\n\n\n\n#### Create Tables: using sql\n\nDefine `user` and `post` table in `flaskr/schema.sql`:\n\n```sql\nDROP TABLE IF EXISTS user;\nDROP TABLE IF EXISTS post;\n\nCREATE TABLE user (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  username TEXT UNIQUE NOT NULL,\n  password TEXT NOT NULL\n);\n\nCREATE TABLE post (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  author_id INTEGER NOT NULL,\n  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  title TEXT NOT NULL,\n  body TEXT NOT NULL,\n  FOREIGN KEY (author_id) REFERENCES user (id)\n);\n```\n\n\n\nAdd functions to run the SQLs to the `db.py`\n\n```python\ndef init_db():\n    db = get_db()\n    \n    with current_app.open_resource('schema.sql') as f:\n        db.executescript(f.read().decode('utf8'))\n\n@click.command('init-db')\ndef init_db_command():\n    '''Clear the existing data and create new tables.'''\n    init_db()\n    click.echo('Initialized the database.')\n```\n\n\n\n#### Register with the Applicaiton\n\nThe close_db and init_db_command functions need to be registered with the app instance for use.\n\nIn `db.py` add a new `init_app` function:\n\n```python\ndef init_app(app):\n    # tells Flask to call that function when cleaning up after returning the response\n    app.teardown_appcontext(close_db)\n    # adds a new command that can be called with the flask command\n    app.cli.add_command(init_db_command)\n```\n\n\n\nThen import and call this function from the factory in `__init__.py`.\n\n```python\ndef create_app(test_config=None):\n    # create and configure the app\n    app = ...\n    # existing code omitted\n    \n    # add db functions\n    from . import db\n    db.init_app(app)\n\n    return app\n\n```\n\n\n\n#### Initialize the Database\n\nNow use `init-db`command like this:\n\n```shell\n$ flask --app flaskr init-db\nInitialized the database.\n\n$ tree instance/\ninstance/\n└── flaskr.sqlite\n\n0 directories, 1 file\n```\n\n\n\nThe command generates a sqlite db file `flaskr.sqlite` in `instance/` dir. \n\n\n\n### Step 5. Blueprints and Views\n\nReferances:\n\n[Blueprints and Views](https://flask.palletsprojects.com/en/2.2.x/tutorial/views/)\n\n[Use a Flask Blueprint to Architect Your Applications](https://realpython.com/flask-blueprint/#:~:text=Flask%20is%20a%20very%20popular,its%20functionality%20into%20reusable%20components)\n\n\n\nConcept: view\n\nA view is Flask's respond to the outgoing request. Flask uses patterns to match the incoming request URL to the view that should handle it.\n\n\n\nConcept: blueprint\n\nA blueprint is a way to organize a group of related views and other code. Rather than registering views and other code directly with an application, they are registered with a blueprint. Then the blueprint is registered with the application when it is available in the factory function.\n\n\n\n#### Create a Blueprint\n\nFlaskr will have two blueprints:\n\n* auth functions\n* blog posts functions\n\n\n\n`Flaskr/auth.py`\n\n```python\nimport functools\n\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, session, url_for\n)\nfrom werkzeug.security import check_password_hash, generate_password_hash\nfrom flaskr.db import get_db\n\nbp = Blueprint('auth', __name__, url_prefix='/auth')\n\n```\n\nA new `Blueprint` is created:\n\n* with `name`: 'auth'\n* with `import_name`: '\\__name__', helping the blueprint to know where it’s defined\n* with `url_prefix`: will be prepended (added at head)to all the URLs associated with this blueprint.\n\nThen register the blueprint to the app from the factory in the `__init__.py`\n\n```python\ndef create_app(test_config=None):\n    # create and configure the app\n    app = ...\n    # existing code omitted\n    \n\n    # add auth blueprint\n    from . import auth\n    app.register_blueprint(auth.bp)\n\n    return app\n```\n\n\n\n\u003e Referances:\n\u003e\n\u003e [Python functools](https://docs.python.org/3/library/functools.html)\n\n\n\n#### Register view\n\nWhen the user visits the `/auth/register` URL, the `register` view will return [HTML](https://developer.mozilla.org/docs/Web/HTML) with a form for them to fill out. When they submit the form, it will validate their input and either show the form again with an error message or create the new user and go to the login page.\n\n\n\nThe view code is as following in `flaskr/auth.py`\n\n```python\n@bp.route('/register', methods=('GET', 'POST'))\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n\n        if not username:\n            error = 'Username is required.'\n        elif not password:\n            error = 'Password is required.'\n\n        if error is None:\n            try:\n                db.execute(\n                    'INSERT INTO user (username, password) VALUES (?, ?)',\n                    (username, generate_password_hash(password))\n                )\n                db.commit()\n            except db.IntegrityError:\n                error = f\"User {username} is already registered.\"\n            else:\n                return redirect(url_for('auth.login'))\n        \n        flash(error)\n    \n    return render_template('auth/register.html')\n```\n\n\n\nThe `register` view works as following:\n\n* @bp.route associates the URL `/register` with the `register` view.\n* If the user submited the register form, `request.method == 'POST'`, then validate the input `username` and `password` and store them into the database.\n* If storing the user info succeeds, then redirect to the `auth.login` page.\n* If the user is initially landing on the `register` page, or there was a validation error, the `register.html` will be shown.\n\n\n\n#### Login view\n\nThis view follows the same pattern as `register` view.\n\n```python\n @bp.route('/login', methods=('GET', 'POST'))\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n\n        user = db.execute(\n            'SELECT * FROM user WHERE username = ?', (username,)\n        ).fetchone()\n\n        if user is None:\n            error = 'Incorrect username.'\n        elif not check_password_hash(user['password'], password):\n            error = 'Incorrect password.'\n        \n        if error is None:\n            session.clear()\n            session['user_id'] = user['id']\n            return redirect(url_for('index'))\n        \n        flash(error)\n    \n    return render_template('auth/login.html')\n\n```\n\nTips:\n\n* The user info is queried and stored in `user` variable using `fetch_one` function.\n* Validate the `username` and `password` (by `check_password_hash`) inputs.\n* The `session` (a dict storing data across requests) refreshes if login succeeds. (The data is stored in a *cookie* that is sent to the browser, and the browser then sends it back with subsequent requests.)\n\n\n\nWe can get user info at the beginning of each request via `session`:\n\n```python\n@bp.before_app_request\ndef load_logged_in_user():\n    user_id = session.get('user_id')\n\n    if user_id is None:\n        g.user = None\n    else:\n        g.user = get_db().execute(\n            'SELECT * FROM user WHERE id = ?', (user_id,)\n        ).fetchone()\n```\n\nTips:\n\n* [`bp.before_app_request()`](https://flask.palletsprojects.com/en/2.2.x/api/#flask.Blueprint.before_app_request) registers a function that runs before the view function, no matter what URL is requested. \n* `load_logged_in_user`  gets that user info from the database via `session` and stores it on [`g.user`](https://flask.palletsprojects.com/en/2.2.x/api/#flask.g), which lasts for the length of the request. \n\n\n\n#### Logout view\n\nThe Logout view removes the user id from the [`session`](https://flask.palletsprojects.com/en/2.2.x/api/#flask.session). \n\n```python\n@bp.route('/logout')\ndef logout():\n    session.clear()\n    return redirect(url_for('index'))\n```\n\n\n\n#### Require Auth in Other views\n\nCreating, editing and deleting blog posts requires the user to be logged in. Use a **decorator** to achieve this.\n\n```python\ndef login_required(view):\n    @functools.wraps(view)\n    def wrapped_view(**kwargs):\n        if g.user is None:\n            return redirect(url_for('auth.login'))\n        \n        return view(**kwargs)\n    \n    return wrapped_view \n```\n\nThis decorator wraps the view in this way: if a user is not logged in, then redirect to login page; if logged in, return the orginal view.\n\n\n\n### Step 6. Templates\n\nThough `auth.login` view has been created, a `TemplateNotFound` error will be raised when you visit http://127.0.0.1:5000/auth/login.\n\n\n\n![image-20221202154357379](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221202154357379.png)\n\nThis is because the view calls `render_template()`, but no templates are created. \n\n\n\nTips:\n\n* The template files will be stored in the `templates` directory inside the `flaskr` package.\n* Templates are files that contain static data as well as placeholders for dynamic data. \n* A template is rendered with specific data to produce a final document. Flask uses the [Jinja](https://jinja.palletsprojects.com/templates/) template library to render templates.\n* Special delimiters are used to distinguish Jinja syntax from the static data in the template. \n  * Anything between `{{` and `}}` is an expression that will be output to the final document. \n  * `{%` and `%}` denotes a control flow statement like `if` and `for`\n\n\n\n#### The Base Layout\n\nEach page in the app has the same basic layout around a different body.Instead of writing the entire HTML structure in each template, each template will extend a base template and override specific sections.\n\n\n\nFile: `flaskr/templates/base.html`\n\n```html\n\u003c!DOCTYPE html\u003e\n\u003ctitle\u003e{% block title %}{% endblock %} - Flaskr\u003c/title\u003e\n\u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\"\u003e\n\u003cnav\u003e\n   \u003ch1\u003eFlaskr\u003c/h1\u003e\n   \u003cul\u003e\n    {% if g.user %}\n        \u003cli\u003e\u003cspan\u003e{{ g.user['username'] }}\u003c/span\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"{{ url_for('auth.logout') }}\"\u003eLog Out\u003c/a\u003e\u003c/li\u003e\n    {% else %}\n        \u003cli\u003e\u003ca href=\"{{ url_for('auth.register') }}\"\u003eRegister\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"{{ url_for('auth.login') }}\"\u003eLog \u003cInput:c\u003e\u003c/Input:c\u003e\u003c/a\u003e\u003c/li\u003e\n    {% endif %}\n   \u003c/ul\u003e \n\u003c/nav\u003e\n\n\u003csection class=\"content\"\u003e\n    \u003cheader\u003e\n        {% block header %}\n        {% endblock %}\n    \u003c/header\u003e\n    {% for message in get_flashed_messages() %}\n        \u003cdiv class=\"flash\"\u003e{{ message }}\u003c/div\u003e\n    {% endfor %}\n    \n    {% block content %}\n    {% endblock %}\n\u003c/section\u003e\n\n```\n\n\n\n\u003eNotes: Using `Jinja Snippets` and `HTML CSS Support` extensions in vscode is helpful to write html code of Jinja templates.\n\n\n\nThere are three blocks defined here that will be overridden in the other templates:\n\n* `{% block title %}` will change the title displayed in the browser’s tab and window title.\n* `{% block header %}` is similar to `title` but will change the title displayed on the page.\n* `{% block content %}` is where the content of each page goes, such as the login form or a blog post.\n\n\n\nThe base template is directly in the `templates` directory. To keep the others organized, the templates for a blueprint will be placed in a directory with the same name as the blueprint.\n\n#### Register template\n\nFile: `flaskr/templates/register.html`\n\n```html\n{% extends 'base.html' %}\n\n{% block header %}\n    \u003ch1\u003e{% block title %}Register{% endblock %}\u003c/h1\u003e\n{% endblock %}\n\n{% block content %}\n    \u003cform method=\"post\"\u003e\n        \u003clabel for=\"username\"\u003eUsername\u003c/label\u003e\n        \u003cinput name=\"username\" id=\"username\" required\u003e        \n        \u003clabel for=\"password\"\u003ePassword\u003c/label\u003e\n        \u003cinput type=\"password\" name=\"password\" id=\"password\" required\u003e\n        \u003cinput type=\"submit\" value=\"Register\"\u003e\n    \u003c/form\u003e\n{% endblock %}\n```\n\n\n#### Log In template\n\nThis is identical to the register template except for the title and submit button.\n\n```html\n{% extends 'base.html' %}\n\n{% block header %}\n    \u003ch1\u003e{% block title %}Log In{% endblock %}\u003c/h1\u003e\n{% endblock %}\n\n{% block content %}\n    \u003cform method=\"post\"\u003e\n        \u003clabel for=\"username\"\u003eUsername\u003c/label\u003e\n        \u003cinput name=\"username\" id=\"username\" required\u003e        \n        \u003clabel for=\"password\"\u003ePassword\u003c/label\u003e\n        \u003cinput type=\"password\" name=\"password\" id=\"password\" required\u003e\n        \u003cinput type=\"submit\" value=\"Log In\"\u003e\n    \u003c/form\u003e\n{% endblock %}\n```\n\n\n\n#### Register a user\n\nVisit http://127.0.0.1:5000/auth/register\n\n![image-20221202174125671](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221202174125671.png)\n\nIf no password inputed, you will see:\n\n![image-20221202174349791](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221202174349791.png)\n\nIf register succeeds, it will redirect to login page:\n\n![image-20221202174548748](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221202174548748.png)\n\nIf incorrect password is inputed, you will get `Incorrect password` warning:\n\n![image-20221202174721957](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221202174721957.png)\n\n\n\n### Step 7. Static Files\n\nUse css file in the `flask/static` directory to give the webpages some style. In the `base.html` template there is already a link to `style.css` file.\n\n```html\n{{ url_for('static', filename='style.css') }}\n```\n\n\n\nFile: flask/static/style.css\n\n```css\nhtml { font-family: sans-serif; background: #eee; padding: 1rem; }\nbody { max-width: 960px; margin: 0 auto; background: white; }\nh1 { font-family: serif; color: #377ba8; margin: 1rem 0; }\na { color: #377ba8; }\nhr { border: none; border-top: 1px solid lightgray; }\nnav { background: lightgray; display: flex; align-items: center; padding: 0 0.5rem; }\nnav h1 { flex: auto; margin: 0; }\nnav h1 a { text-decoration: none; padding: 0.25rem 0.5rem; }\nnav ul  { display: flex; list-style: none; margin: 0; padding: 0; }\nnav ul li a, nav ul li span, header .action { display: block; padding: 0.5rem; }\n.content { padding: 0 1rem 1rem; }\n.content \u003e header { border-bottom: 1px solid lightgray; display: flex; align-items: flex-end; }\n.content \u003e header h1 { flex: auto; margin: 1rem 0 0.25rem 0; }\n.flash { margin: 1em 0; padding: 1em; background: #cae6f6; border: 1px solid #377ba8; }\n.post \u003e header { display: flex; align-items: flex-end; font-size: 0.85em; }\n.post \u003e header \u003e div:first-of-type { flex: auto; }\n.post \u003e header h1 { font-size: 1.5em; margin-bottom: 0; }\n.post .about { color: slategray; font-style: italic; }\n.post .body { white-space: pre-line; }\n.content:last-child { margin-bottom: 0; }\n.content form { margin: 1em 0; display: flex; flex-direction: column; }\n.content label { font-weight: bold; margin-bottom: 0.5em; }\n.content input, .content textarea { margin-bottom: 1em; }\n.content textarea { min-height: 12em; resize: vertical; }\ninput.danger { color: #cc2f2e; }\ninput[type=submit] { align-self: start; min-width: 10em; }\n```\n\n\n\nAfter that, reload the login page, and you can see:\n\n![image-20221202175806462](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221202175806462.png)\n\n\n\n### Step 8. Blog Blueprint\n\nImplement the blog blueprint to allow a logged-in user to create posts and edit/delete the posts of his/her own.\n\n\u003e Note: As you implement each view, keep the development server running. As you save your changes, try going to the URL in your browser and testing them out.\n\n\n\n#### The Blog Blueprint\n\n\n\nDefine blog blueprint in file: `flask/blog.py`\n\n``` \nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, session, url_for\n)\nfrom werkzeug.exceptions import abort\n\nfrom flaskr.db import get_db\nfrom flaskr.auth import login_required\n\nbp = Blueprint('auth', __name__)\n```\n\n\n\nRegister this blueprint in the app factory in file : `flask/__init__.py`\n\n```python\ndef create_app(test_config=None):\n    # create and configure the app\n    app = ...\n    # existing code omitted\n\n    # add blog blueprint\n    from . import blog\n    app.register_blueprint(blog.bp)\n    app.add_url_rule('/', endpoint='index')\n\n    return app\n```\n\n\n\nUnlike the auth blueprint, the blog blueprint does not have a `url_prefix`. So the index view will be at `/`, the create view at `/create`. The blog is the main feature of Flaskr app, so it makes sense that the blog index will be the main index.\n\n\n\nThe endpoint for index view in blog blueprint will be `blog.index`. The `app.add_url_rule('/', endpoint='index')` code associates the endpoint name 'index' with the `/` url so that `url_for('index')` or `url_for('blog.index')` will both work, generating the same `/` URL either way. \n\n\n\n#### Index: view and template\n\nThe index view shows all the posts of the logged-in user, order by created time desc. Use SQL's JOIN clause.\n\n\n\nDefine index view in file: `flaskr/blog.py`:\n\n```python\n@bp.route('/')\ndef index():\n    db = get_db()\n    posts = db.execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' ORDER BY created DESC'\n    ).fetchall()\n    return render_template('blog/index.html', posts=posts)\n```\n\n\n\nDefine index template in file: `flaskr/templates/index.html`:\n\n```html\n{% extends 'base.html' %}\n\n{% block header %}\n    \u003ch1\u003e{% block title %}Posts{% endblock %}\u003c/h1\u003e\n    {% if g.user %}\n        \u003ca class=\"action\" href=\"{{ url_for('blog.create') }}\" \u003eNew\u003c/a\u003e\n    {% endif %}\n{% endblock %}\n\n{% block content %}\n    {% for post in posts %}\n        \u003carticle class=\"post\"\u003e\n            \u003cheader\u003e\n                \u003cdiv\u003e\n                    \u003ch1\u003e{{ post['title'] }}\u003c/h1\u003e\n                    \u003cdiv class=\"about\"\u003eby {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }}\u003c/div\u003e\n                \u003c/div\u003e\n                {% if g.user['id'] == post['author_id'] %}\n                    \u003ca class=\"action\" href=\"{{ url_for('blog.update', id=post['id']) }}\"\u003eEdit\u003c/a\u003e\n                {% endif %}\n            \u003c/header\u003e\n        \u003c/article\u003e\n        {% if not loop.last %}\n            \u003chr\u003e\n        {% endif %}\n    {% endfor %}\n{% endblock %}\n```\n\nTips:\n\n* when a user is logged in, the `header` block adds a link to the `create` view.\n* when the user is the author of a post, an `Edit` link to the `update` view will be seen.\n* `loop.last` is a special variable of Jinja's loop.\n\n\n\n#### Create: view and template\n\nThe `blog.create` view acts the similar way as `auth.register` view.\n\nDefine `blog.create` view in file: `flaskr/blog.py`:\n\n```python\n@bp.route('/create', methods=('GET', 'POST'))\n@login_required\ndef create():\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is requested.'\n        \n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'INSERT INTO post (title, body, author_id)'\n                ' VALUES (?, ?, ?)',\n                (title, body, g.user['id'])\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n            \n    return render_template('blog/create.html')\n```\n\n\n\nTips:\n\n* if a new post is POSTed, add it into the database.\n* Or display the form of creating post in the `create` template.\n* Login_required decorator is used here to insure the user is logged-in before a new post is created.\n\n\n\nDefine the `create` template in file: `flaskr/templates/blog/create.html`\n\n```html\n{% extends 'base.html' %}\n\n{% block header %}\n    \u003ch1\u003e{% block title %}New Post{% endblock %}\u003c/h1\u003e\n{% endblock %}\n\n{% block content %}\n    \u003cform method=\"POST\"\u003e\n        \u003clabel for=\"title\"\u003eTitle\u003c/label\u003e\n        \u003cinput name=\"title\" id=\"title\" value=\"{{ request.form['title'] }}\" required\u003e\n        \u003clabel for=\"body\"\u003eBody\u003c/label\u003e\n        \u003ctextarea name=\"body\" id=\"body\"\u003e{{ request.form['body'] }}\u003c/textarea\u003e\n        \u003cinput type=\"submit\" value=\"Save\"\u003e\n    \u003c/form\u003e\n{% endblock %}\n```\n\n\n\n#### Update: view and template\n\nWrite a `get_post()` function to fetch a post by id and check if the author equals the logged in user. This function will be used in `update` and `delete` view.\n\n\n\nDefine get_post() function in file: `flaskr/blog.py`:\n\n```python\ndef get_post(id, check_author=True):\n    post = get_db().execute(\n        'SELECT p.id, title, body, created, author_id, user_name'\n        ' FROM post p JOIN user u ON p.author_id=u.id'\n        ' WHERE p.id = ?',\n        (id,)\n    ).fetchone()\n\n    if post is None:\n        abort(404, f'Post id {id} does not exist.')\n\n    if check_author and post['author_id'] != g.user['id']:\n        abort(403)\n    \n    return post\n```\n\nTips:\n\n* `abort()` will raise a exception that returns an HTTP status code like 404 (Not Found) or 403 (Forbidden).\n\n\n\nDefine `update` view in file: `flaskr/blog.py`:\n\n```python\n\n@bp.route('/\u003cint:id\u003e/update', methods=('GET', 'POST'))\n@login_required\ndef update(id):\n    post = get_post(id)\n\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n        \n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'UPDATE post SET title = ?, body = ?'\n                ' WHERE id = ?',\n                (title, body, id)\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n        \n    return render_template('blog/update.html', post=post)\n```\n\nTips:\n\n* `update` view takes an argument `id` , which corresponds to the `\u003cint:id\u003e` in the route. A real URL will look like `/1/update`. And the url_for() function also needs to be passed the `id` argument in the way of `url_for('blog.update', id=post['id'])`.\n\n\n\nDefine the update template in file: `flaskr/templates/blog/update.html`\n\n```html\n{% extends 'base.html' %}\n\n{% block header %}\n    \u003ch1\u003e{% block title %}Edit \"{{ post['title'] }}\"{% endblock %}\u003c/h1\u003e\n{% endblock %}\n\n{% block content %}\n    \u003cform method=\"POST\"\u003e\n        \u003clabel for=\"title\"\u003eTitle\u003c/label\u003e\n        \u003cinput name=\"title\" id=\"title\" value=\"{{ request.form['title'] or post['title'] }}\" required\u003e\n        \u003clabel for=\"body\"\u003eBody\u003c/label\u003e\n        \u003ctextarea name=\"body\" id=\"body\"\u003e{{ request.form['body'] or post['body'] }}\u003c/textarea\u003e\n        \u003cinput type=\"submit\" value=\"Save\"\u003e\n    \u003c/form\u003e\n    \u003chr\u003e\n    \u003cform action=\"{{ url_for('blog.delete', id=post['id']) }}\" method=\"post\"\u003e\n        \u003cinput type=\"submit\" value=\"Delete\" class=\"danger\" onclick=\"return confirm('Are you sure?');\"\u003e\n    \u003c/form\u003e\n{% endblock %}\n```\n\n\n\nTips:\n\n* This templates has two forms:\n  * The first one to edit the current post(`/\u003cid\u003e/update`)\n  * The other one to delete the post\n* The pattern `{{ request.form['title'] or post['title'] }}` is used to choose what data appears in the form. \n  * When the form hasn’t been submitted, the original `post` data appears\n  * but if invalid form data was posted you want to display that so the user can fix the error, so `request.form` is used instead.\n\n\n\n#### Delete: view\n\nThe delete view has no template. Define it:\n\n```python\n@bp.route('/\u003cint:id\u003e/delete', methods=('POST',))\n@login_required\ndef delete(id):\n    get_post(id)\n    db = get_db()\n    db.execute('DELETE FROM post WHERE id = ?', (id,))\n    db.commit()\n    return redirect(url_for('blog.index'))\n\n```\n\n\n\nNow all code are finished. Try it!\n\n\n\nlog in \n\n![image-20221203225939183](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221203225939183.png)\n\n\n\nLog out\n\n![image-20221203230028831](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221203230028831.png)\n\n\n\nCreate a post\n\n![image-20221203230103978](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221203230103978.png)\n\n\n\nWriting\n\n![image-20221203230232647](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221203230232647.png)\n\n\n\nsaved\n\n![image-20221203230339421](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221203230339421.png)\n\nedit\n\n![image-20221203230548770](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221203230548770.png)\n\n\n\nGreat!\n","lastmodified":"2022-12-14T10:05:00.50340721Z","tags":null},"/notes/hands-on-zeppelin":{"title":"Hands on Zeppelin","content":"\n\n\n# Hands on Zeppelin: Step by Step\n\n\u003e In order to build a data playground enabling the engineers to explore data collected by autonomous cars, I am trying to deploy Apache Zeppelin as a component of data platform.\n\n## Introduction\n\n[Apache Zeppelin](https://zeppelin.apache.org/) is: \"Web-based notebook that enables data-driven,\ninteractive data analytics and collaborative documents with SQL, Scala, Python, R and more.\"\n\n\n\n## Install\n\nAccording to [installation document](https://zeppelin.apache.org/docs/0.10.0/quickstart/install.html), I choose to install Zeppelin using the offical docker on a server (http://10.10.32.4):\n\n```sh\n$ mkdir Zeppelin \u0026 cd Zeppelin\n$ docker run -u $(id -u) -p 8080:8080 --rm -v $PWD/logs:/logs -v $PWD/notebook:/notebook \\\n           -e ZEPPELIN_LOG_DIR='/logs' -e ZEPPELIN_NOTEBOOK_DIR='/notebook' \\\n           --name zeppelin apache/zeppelin:0.10.0\n\nUnable to find image 'apache/zeppelin:0.10.0' locally\n0.10.0: Pulling from apache/zeppelin\n16ec32c2132b: Pull complete\naafd5bdc2bb7: Pull complete\n0bb58b150809: Pull complete\n68d71ea3a296: Pull complete\n9c7277321f0c: Downloading [=============================================\u003e     ]   2.59GB/2.816GB\n6be3e4488900: Download complete\n622d30c2f649: Download complete\nd10a38bf471f: Download complete\n4006c4346d45: Download complete\n4f4fb700ef54: Download complete\n\n...\n\nERROR [2022-12-13 08:13:15,873] ({main} ZeppelinServer.java[main]:262) - Error while running jettyServer\njava.lang.Exception: A MultiException has 2 exceptions.  They are:\n1. java.io.IOException: Creating directories for /notebook/.git failed\n2. java.lang.IllegalStateException: Unable to perform operation: create on org.apache.zeppelin.notebook.repo.NotebookRepoSync\n\n\tat org.apache.zeppelin.server.ZeppelinServer.main(ZeppelinServer.java:256)\n\n```\n\n\n\nThese two error was raised because of [Volume mapping issue with Zeppelin](https://forums.docker.com/t/volume-mapping-issue-with-zeppelin/121917), you can fix it to add\n\n`-u 0` parameter to set the user to 0 (root) in docker run.\n\n```sh\n$ docker run -u $(id -u) -p 8080:8080 -u 0 --rm -v $PWD/logs:/logs -v $PWD/notebook:/notebook \\\n           -e ZEPPELIN_LOG_DIR='/logs' -e ZEPPELIN_NOTEBOOK_DIR='/notebook' \\\n           --name zeppelin apache/zeppelin:0.10.0\n```\n\n\n\nor you can change the owner of dir `logs` and `notebook` using:\n\n```sh\n$ sudo chown -R 1000:1000 notebook\n$ sudo chown -R 1000:1000 logs\n$ docker run -u $(id -u) -p 8080:8080 --rm -v $PWD/logs:/logs -v $PWD/notebook:/notebook \\\n           -e ZEPPELIN_LOG_DIR='/logs' -e ZEPPELIN_NOTEBOOK_DIR='/notebook' \\\n           --name zeppelin apache/zeppelin:0.10.0\n```\n\n\n\nThen visit http://10.10.32.4:8080/ to use Zeppelin.\n\n![image-20221213165658796](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221213165658796.png)\n\n\n\n## Create New Note\n\n![yshJJIkNnq](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/yshJJIkNnq.jpg)\n\nCreate a new note through these two entries by giving it a name and select a default interpreter.\n\n\u003cimg src=\"https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221214150836370.png\" alt=\"image-20221214150836370\" style=\"zoom:50%;\" /\u003e\n\n\u003e You can use multiple interpreter in one zeppeline note to support different languages. You can get this via ChatGPT. See details in \"Q\u0026A (with ChatGPT on Zeppelin)\" part.\n\n![image-20221214151356720](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221214151356720.png)\n\nI write 3 different code snippet in 3 different languages of Markdown, Python and sql. Run them and we will get:\n\n![image-20221214151758144](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221214151758144.png)\n\nYou can see: \n\n* %md and %python work fine.\n* %sql gives an error: Interpreter sql not found.\n\n## Interpreters\n\nWe can see and manage Zeppelin's interpreters via the 'interpreter' menu below: \n\n\u003cimg src=\"https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221214151959692.png\" alt=\"image-20221214151959692\" style=\"zoom:50%;\" /\u003e\n\n\n\nAll interpreters are here:\n\n![image-20221214154255076](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221214154255076.png)\n\n## Add a SQL interpreter\n\nIn order to access data in mysql, add a SQL interpreter:\n\nReference: \n\n* [SQL support in Zeppelin](https://zeppelin.apache.org/docs/0.8.0/quickstart/sql_with_zeppelin.html)\n* [Generic JDBC Interpreter for Apache Zeppelin - mysql](https://zeppelin.apache.org/docs/0.8.0/interpreter/jdbc.html#mysql)\n\n\u003e If you want to connect other databases such as `Mysql`, `Redshift` and `Hive`, you need to edit the property values. You can also use [Credential](https://zeppelin.apache.org/docs/latest/setup/security/datasource_authorization.html) for JDBC authentication. If `default.user` and `default.password` properties are deleted(using X button) for database connection in the interpreter setting page, the JDBC interpreter will get the account information from [Credential](https://zeppelin.apache.org/docs/latest/setup/security/datasource_authorization.html).\n\n* [Data Source Authorization in Apache Zeppelin](https://zeppelin.apache.org/docs/0.7.0/security/datasource_authorization.html)\n* [Tutorial: Using Apache Zeppelin with MySQL](https://thedataist.com/tutorial-using-apache-zeppelin-with-mysql/)\n\n\n\nFirst, add a credential info, which stores safely the username and password of the mysql connection:\n\n![image-20221214164153294](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221214164153294.png)\n\n\n\nSecond, add a new interpreter `adbsql` as \n\n![image-20221214164336089](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221214164336089.png)\n\nRemember to add dependencies to locate the jar used to run the mysql driver:\n\n![image-20221214164508044](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221214164508044.png)\n\n\n\n## Access Data using SQL\n\nThen I can access the data in mysql using sql like this:\n\n![image-20221214171612554](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221214171612554.png)\n\n## Q\u0026A (with ChatGPT on Zeppelin)\n\n### Can I use python and sql in one zeppelin note?\n\nChatGPT:\n\n\u003e Yes, it is possible to use Python and SQL together in a Zeppelin notebook. In fact, many data analysis tasks can benefit from combining the capabilities of both languages.\n\u003e\n\u003e \n\u003e\n\u003e To use Python and SQL together in a Zeppelin notebook, you will first need to make sure that you have the appropriate interpreters installed and configured. In Zeppelin, an interpreter is a plug-in that enables the notebook to execute code in a specific programming language. For Python and SQL, you will need to install and configure the Python and SQL interpreters, respectively.\n\u003e\n\u003e \n\u003e\n\u003e Once the interpreters are installed and configured, you can use the `%python` and `%sql` magic commands in your Zeppelin notebook to switch between Python and SQL code blocks. For example, you could use Python to load and clean your data, and then use SQL to analyze and visualize the cleaned data.\n\u003e\n\u003e Here is an example of how you might use Python and SQL together in a Zeppelin notebook:\n\n```python\n%python\n# load and clean data using Python\n\nimport pandas as pd\n\ndf = pd.read_csv(\"data.csv\")\ndf = df.dropna()\n\n%sql\n-- analyze and visualize data using SQL\n\nSELECT * FROM df LIMIT 10\n\n```\n\n\u003e I hope this helps! Let me know if you have any other questions.\n\n\n\n### SQL: how to add a sql interpreter to apache zeppelin\n\n\u003cimg src=\"https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221214155408956.png\" alt=\"image-20221214155408956\" style=\"zoom:50%;\" /\u003e\n\n### Java: hello world in apache zeppelin\n\n[Java interpreter for Apache Zeppelin](https://zeppelin.apache.org/docs/0.9.0/interpreter/java.html)\n\nChatGPT:\n\n![image-20221214152806322](https://happy3-data.oss-cn-hangzhou.aliyuncs.com/content-images/image-20221214152806322.png)\n","lastmodified":"2022-12-14T10:05:00.50340721Z","tags":null},"/notes/python-programming":{"title":"Python Programming","content":"\n# Python Programming\n\n## Flask\n\n* [Hands on Flask](notes/hands-on-flask.md)\n","lastmodified":"2022-12-14T10:05:00.50340721Z","tags":null}}